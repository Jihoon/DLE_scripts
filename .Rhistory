load(file="H:/MyDocuments/IO work/DLE_scripts/Saved tables/final_demand.Rda")
load(file="H:/MyDocuments/IO work/DLE_scripts/Saved tables/tot_demand.Rda")
### Intensity calculations ###
# Indexing energy carriers
nature_input_idx <- 1:19   # number of rows for E-carrier use after removing the row headers
emission_energy_carrier_idx <- 20:70   # number of rows for E-carrier use after removing the row headers
energy_carrier_supply_idx <- 71:139   # number of rows for E-carrier use after removing the row headers
energy_carrier_use_idx <- 140:208   # number of rows for E-carrier use after removing the row headers
elec_use_idx <- 184:195   # number of rows for E-carrier use after removing the row headers
elec_supply_idx <- 115:126   # number of rows for E-carrier use after removing the row headers
captive_input_idx <- c(4, 5, 26, 27, 12, 2)  # Coal, diesel, natural gas, biomass (bagass) index in energy_carrier_use block
# energy_pri_carrier_use_idx <- c(140:154, 187:188, 191:194)   # number of rows for E-carrier use after removing the row headers
# energy_sec_carrier_use_idx <- energy_carrier_use_idx[!(energy_carrier_use_idx %in% energy_pri_carrier_use_idx)]
####### Temporary solution : Ignore all energy sector columns (make their use all zero)
### Note: This loses all own use and non-energy use from energy sectors (around 10% of world average).
materials.header <- read.table(paste(path_iot, "mrMaterials_version2.2.0.txt", sep=""), header=FALSE, sep="\t", dec=".", nrows=2)
energy_sector_idx_ex <- c(64:85, 91:95, 128:146, 148, 176:182)    # Column index for energy sectors (excluding pulp and extraction sectors)
fossil.elec.idx.ex <- c(128, 129, 133)    # Column index for energy sectors (excluding pulp and extraction sectors)
energy.carrier.idx.ex <- c(20:32, 64:85, 91:95, 128:146, 148, 176:182)    # Column index for energy sectors (excluding pulp and extraction sectors)
captive_sector_idx_ex <- c(108, 36, 104, 90, 28, 62, 101, 50, 88, 89, 55)    # Column index for major captive generation sectors (Just for India for now)
captive_sector_names <- EX_catnames[captive_sector_idx_ex]
# Aluminum1/2, steel, chemicals, petroleum(crude oil), paper, cement, sugar, fertilizer1/2, textiles
### Dealing with captive generation (India only now)
# Crude estimates based on literature
captive_pri <- read.xlsx("H:/MyDocuments/Analysis/Final energy/Captive power India/generation estimates by sector.xlsx",
sheet=2, rowNames=TRUE, cols=1:7, rows=15:26)
# Names of energy carriers
carrier.name.fin <- gsub("Energy Carrier Use ", "", as.character(material.name[energy_carrier_use_idx]))
carrier.name.pr <- material.name[nature_input_idx]
# Different sections of energy extension
tot.priE.sect <- materials[nature_input_idx,]  # The energy extension has not intensities but total consumptions.
tot.useE.sect <- materials[energy_carrier_use_idx,]
tot.supplE.sect <- materials[energy_carrier_supply_idx,]
tot.fdE.sect <- fd_materials[energy_carrier_use_idx, -seq(7, 336, 7)] # Excluding exports
tot.useE.elec <- materials[elec_use_idx,]
tot.supplE.elec <- materials[elec_supply_idx,]
# Interim check
# compare global total supply and use
# ene.sum <- data.frame(carrier=carrier.name.fin, sup=rowSums(tot.supplE.sect), use=rowSums(tot.useE.sect), fd.use=rowSums(tot.fdE.sect[, -seq(7, 336, 7)]),
#            tot.use=rowSums(tot.useE.sect)+rowSums(tot.fdE.sect[, -seq(7, 336, 7)])) %>%
#        mutate(diff=sup-tot.use, error=diff/sup)
# sum(ene.sum$sup)
# sum(ene.sum$tot.use)
# sum(tot.priE.sect)
# Organize the energy carrier use block to remove primary values
energy_sector_idx_all <- as.vector(sapply(seq(0,9400,200), function(x) x+energy_sector_idx_ex, simplify = "array"))
a <- tot.useE.sect
a[setdiff(1:dim(a)[1], (elec_use_idx - first(energy_carrier_use_idx) + 1)), energy_sector_idx_all] <- 0  # Energy sector assumed to have only electricty as final energy
save(materials, file="H:/MyDocuments/IO work/DLE_scripts/Saved tables/materials.Rda")
materials <- read.table(paste(path_iot, "mrMaterials_version2.2.0.txt", sep=""), header=FALSE, sep="\t", dec=".", skip=2)
material.name <- materials[,1]
materials <- materials[,c(-1,-2)]
save(materials, file="H:/MyDocuments/IO work/DLE_scripts/Saved tables/materials.Rda")
load(file="H:/MyDocuments/IO work/DLE_scripts/Saved tables/materials.Rda")
####### Temporary solution : Ignore all energy sector columns (make their use all zero)
### Note: This loses all own use and non-energy use from energy sectors (around 10% of world average).
materials.header <- read.table(paste(path_iot, "mrMaterials_version2.2.0.txt", sep=""), header=FALSE, sep="\t", dec=".", nrows=2)
energy_sector_idx_ex <- c(64:85, 91:95, 128:146, 148, 176:182)    # Column index for energy sectors (excluding pulp and extraction sectors)
fossil.elec.idx.ex <- c(128, 129, 133)    # Column index for energy sectors (excluding pulp and extraction sectors)
energy.carrier.idx.ex <- c(20:32, 64:85, 91:95, 128:146, 148, 176:182)    # Column index for energy sectors (excluding pulp and extraction sectors)
captive_sector_idx_ex <- c(108, 36, 104, 90, 28, 62, 101, 50, 88, 89, 55)    # Column index for major captive generation sectors (Just for India for now)
captive_sector_names <- EX_catnames[captive_sector_idx_ex]
# Aluminum1/2, steel, chemicals, petroleum(crude oil), paper, cement, sugar, fertilizer1/2, textiles
### Dealing with captive generation (India only now)
# Crude estimates based on literature
captive_pri <- read.xlsx("H:/MyDocuments/Analysis/Final energy/Captive power India/generation estimates by sector.xlsx",
sheet=2, rowNames=TRUE, cols=1:7, rows=15:26)
# Names of energy carriers
carrier.name.fin <- gsub("Energy Carrier Use ", "", as.character(material.name[energy_carrier_use_idx]))
carrier.name.pr <- material.name[nature_input_idx]
# Different sections of energy extension
tot.priE.sect <- materials[nature_input_idx,]  # The energy extension has not intensities but total consumptions.
tot.useE.sect <- materials[energy_carrier_use_idx,]
tot.supplE.sect <- materials[energy_carrier_supply_idx,]
tot.fdE.sect <- fd_materials[energy_carrier_use_idx, -seq(7, 336, 7)] # Excluding exports
tot.useE.elec <- materials[elec_use_idx,]
tot.supplE.elec <- materials[elec_supply_idx,]
# Organize the energy carrier use block to remove primary values
energy_sector_idx_all <- as.vector(sapply(seq(0,9400,200), function(x) x+energy_sector_idx_ex, simplify = "array"))
a <- tot.useE.sect
a[setdiff(1:dim(a)[1], (elec_use_idx - first(energy_carrier_use_idx) + 1)), energy_sector_idx_all] <- 0  # Energy sector assumed to have only electricty as final energy
################ THIS NOT USED in the end ################
# # Attempt to subtract captive generation from the 'energy carrier use' block (using IPFP)
# # with sectors sum = captive generation total, carrier sum following EXIO total ratio (with matched total)
# # Why IPFP?
# # 1. Captive gen GWh > total energy use (for some sectors)
# # (Aluminum captive generation is so high in the data, but the sector's total energy use in EXIO extension is even lower than that.)
# library(mipfp)
# IND_ene_cap <- a[captive_input_idx, 200*(IND_place-1) + captive_sector_idx_ex]   # Total energy for captive generation sectors/carrier
# # Finding: IPFP cannot give proper solution in this case.
# names(IND_ene_cap) <- EX_catnames[captive_sector_idx_ex]
# rownames(IND_ene_cap) <- names(captive_pri)
# sc <- sum(captive_pri)/sum(IND_ene_cap)
# IND_total_capgen <- Ipfp(captive_pri, list(1,2), list(rowSums(captive_pri), rowSums(IND_ene_cap)*sc))$x.hat #* sum(captive_pri)
# IND_total_capgen <- Ipfp(captive_pri, list(1,2), list(colSums(IND_ene_cap)*sc, colSums(captive_pri)))$x.hat #* sum(captive_pri)
# IND_total_capgen[IND_total_capgen<1e-3] <- 0
# t(IND_ene_cap) - IND_total_capgen
#####################################################
# Try just erasing those sectors/carriers (only for India for now)
a[captive_input_idx, 200*(IND_place-1) + captive_sector_idx_ex] <- 0
# Numerical matrix - final energy use total
tot.finE.sect <- a
row.names(tot.finE.sect) <- carrier.name.fin
# Total primary energy carved out of energy carrier use block
tot.prim.use <- tot.useE.sect - a  # Another way to get primary energy intensity.
# Header and name column added as a data.frame (mainly for visualization/interim check)
# tot.finE.sect.df <- rbindlist(list(materials.header[,-1], data.frame(carrier.name.fin, tot.finE.sect)), use.names=FALSE, fill=FALSE, idcol=NULL) # In TJ
# tot.priE.sect.df <- rbindlist(list(materials.header[,-1], data.frame(carrier.name.pr, tot.priE.sect)), use.names=FALSE, fill=FALSE, idcol=NULL) # In TJ
####### Derive energy intensities #######
# 1.1 embodied primary energy intensity (nature input)
y <- 1/tot_demand
y[is.infinite(y)] <- 0
energy_int <- as.matrix(tot.priE.sect) %*% diag(y)   # Derive energy intensities by dividing by total demand per sector TJ/M.EUR = MJ/EUR
# indirect_E_int <- energy_int %*% as.matrix(L_inverse)   # (intensity by sector) * (I-A)^-1
indirect_E_int <- eigenMapMatMult(energy_int, as.matrix(L_inverse)) # faster
energy_int.nobio <- energy_int[-18:-19,]   # Try removing biomass
# indirect_E_int.nobio <- energy_int.nobio %*% as.matrix(L_inverse)   # (intensity by sector) * (I-A)^-1
indirect_E_int.nobio <- eigenMapMatMult(energy_int.nobio, as.matrix(L_inverse)) # faster
# 1.2 embodied primary energy intensity (tot.prim.use)
# Test - Derive primary intensity from total primary carrier use (tot.prim.use)
p_energy_int <- as.matrix(tot.prim.use) %*% diag(y)   # Derive energy intensities by dividing by total demand per sector TJ/M.EUR = MJ/EUR
# indirect_pE_int <- p_energy_int %*% as.matrix(L_inverse)   # (intensity by sector) * (I-A)^-1
indirect_pE_int <- eigenMapMatMult(p_energy_int, as.matrix(L_inverse)) # faster
# 2. final energy (embodied)
f_energy_int <- as.matrix(tot.finE.sect) %*% diag(y)   # Derive energy intensities by dividing by total demand per sector TJ/M.EUR = MJ/EUR
indirect_fE_int <- f_energy_int %*% as.matrix(L_inverse)   # (intensity by sector) * (I-A)^-1
indirect_fE_int <- eigenMapMatMult(f_energy_int, as.matrix(L_inverse)) # faster
# 3. electricity (embodied)
elec_int <- as.matrix(tot.useE.elec) %*% diag(y)   # Derive energy intensities by dividing by total demand per sector TJ/M.EUR = MJ/EUR
# indirect_El_int <- elec_int %*% as.matrix(L_inverse)   # (intensity by sector) * (I-A)^-1
indirect_El_int <- eigenMapMatMult(elec_int, as.matrix(L_inverse)) # faster
# 4. total use block (embodied)
totuse_int <- as.matrix(tot.useE.sect) %*% diag(y)   # Derive energy intensities by dividing by total demand per sector TJ/M.EUR = MJ/EUR
# indirect_El_int <- elec_int %*% as.matrix(L_inverse)   # (intensity by sector) * (I-A)^-1
indirect_use_int <- eigenMapMatMult(totuse_int, as.matrix(L_inverse)) # faster
# AUX. indirect emission intensity (I don't use it now)
# em_int <- as.matrix(emissions_2.3) %*% diag(y) / 1e6  # Derive energy intensities by dividing by total demand per sector kg/M.EUR = mg/EUR to kg/EUR
# indirect_em_int <- as.matrix(em_int) %*% as.matrix(L_inverse)   # (intensity by sector) * (I-A)^-1   g/EUR
# Energy use vs. Demand
view(cbind(c(carrier.name.fin, "td"), rbind(tot.finE.sect[,IND_idx_ex], tot_demand[IND_idx_ex])))
view(cbind(carrier.name.fin, f_energy_int[,IND_idx_ex]))
# Check energy total
sum(tot.finE.sect) + sum(tot.fdE.sect)  # All final energy use (global) = 407e3 PJ (without non-energy use of energy sector), IEA 2007 has 384e3 PJ (including own use).
sum(tot.priE.sect)  # All primary energy use (global) = 483e3 PJ, IEA has 500e3 PJ (after excluding import = 706 - 200).
sum(tot.prim.use)   # All primary energy use from use side (global) = 398e3 PJ
# rm(L_inverse, tot_use, supplym, materials_reduc)
# rm(val_AT_rand, val_FR_rand, val_IN_rand)
# rm(final_alloc_list_FRA, final_alloc_list_FRA_all, result_FRA, result_FRA_all)
# rm(eHH, all_HH_f, all_HH_fl, eHH_cap)
# gc()
# Return EXIO indirect intensity in MJ/USD2007
GetSpecificEXIOSectorIntensity <- function(cty, exio_sect) {
cty_place <- which(exio_ctys==cty)
# cty_idx_fd <- seq(7*(cty_place-1)+1, 7*cty_place)   # 7 final demand columns per country
cty_idx_ex <- seq(200*(cty_place-1)+1, 200*cty_place)   # 7 final demand columns per country
ex_idx <- which(EX_catnames==exio_sect)
int <- colSums(indirect_E_int[,cty_idx_ex])[ex_idx] * EXR_EUR$r   # MJ/EUR to MJ/USD2007
return(int)
}
save(fd_materials, file="H:/MyDocuments/IO work/DLE_scripts/Saved tables/fd_materials.Rda")
fd_materials <- read.table(paste(path_iot, "mrFDMaterials_version2.2.0.txt", sep=""), header=FALSE, sep="\t", dec=".", skip=2)
fd_materials <- fd_materials[,c(-1,-2)]
save(fd_materials, file="H:/MyDocuments/IO work/DLE_scripts/Saved tables/fd_materials.Rda")
tot.fdE.sect <- fd_materials[energy_carrier_use_idx, -seq(7, 336, 7)] # Excluding exports
sum(tot.finE.sect) + sum(tot.fdE.sect)  # All final energy use (global) = 407e3 PJ (without non-energy use of energy sector), IEA 2007 has 384e3 PJ (including own use).
# Get IND final demand from EXIO [M.EUR to M.USD]
IND_place <- which(exio_ctys=="IN")
IND_idx_fd <- seq(7*(IND_place-1)+1, 7*IND_place)   # 7 final demand columns per country
IND_idx_ex <- seq(200*(IND_place-1)+1, 200*IND_place)   # 200 EXIO comodities
IND_idx_ex.i <- seq(163*(IND_place-1)+1, 163*IND_place)   # 163 EXIO industries
IND_fd_ex <- matrix(final_demand[,IND_idx_fd[1]], nrow=200) / EXR_EUR$r  # to M.USD (2007 MER)
IND_fd_exio <- rowSums(IND_fd_ex) # Sum all HH FD across countries
IND_fd_exio_imp <- rowSums(IND_fd_ex[,-IND_place]) # Sum all HH FD across countries
# Get BRA final demand from EXIO [M.EUR to M.USD]
BRA_place <- which(exio_ctys=="BR")
BRA_idx_fd <- seq(7*(BRA_place-1)+1, 7*BRA_place)   # 7 final demand columns per country
BRA_idx_ex <- seq(200*(BRA_place-1)+1, 200*BRA_place)   # 7 final demand columns per country
# Issue: This 'final_demand' for BRA gives too small values for electricity expenditure.
# Instead I can use the column from 'BR_output.xls' file.
# BRA_fd_ex <- matrix(final_demand[,BRA_idx_fd[1]], nrow=200)
# BRA_fd_exio <- rowSums(BRA_fd_ex) # Sum all HH FD across countries
# BRA_fd_exio_imp <- rowSums(BRA_fd_ex[,-BRA_place]) # Sum all HH FD across countries
BRA_fd_ex <- read_excel("H:/MyDocuments/IO work/Valuation/BR_output.xls", sheet="usebptot", skip=14, col_names=FALSE)
# Issue: Brazil FD has zero education expediture. (reasons unknown)
# Simply replace the zero with the values found on actual BRA IO
BRA_fd_exio <- as.matrix(BRA_fd_ex[1:200,169])
BRA_fd_exio[174] <- 15600  # M Euro
BRA_fd_exio <- BRA_fd_exio / EXR_EUR$r  # to M.USD 2007
# The value 15600 is from H:\MyDocuments\IO work\Bridging\CES-COICOP\BRA IO FD comparison.xlsx
source("Map_CES_COICOP.R")
### Read in ICP heading number following NTNU 109 mapping (not 100%, some ICP headings are aggregated) ###
Mapping <- system.file("ICP_SEQ.xlsx", package = "XLConnect")
wb <- XLConnect::loadWorkbook("H:/MyDocuments/IO work/Bridging/CES-COICOP/Worldbank/ICP_SEQ.xls")
# I added 'Sheet2' and fixed some mis-categorizations for my needs.
icp_seq <- XLConnect::readWorksheet(wb, sheet="Sheet2", header=TRUE, startRow=2, startCol=1, endCol=1, forceConversion=T)
icp_cat <- XLConnect::readWorksheet(wb, sheet="Sheet2", header=FALSE, startRow=3, startCol=3, endCol=4, forceConversion=T)
NTNU <- XLConnect::readWorksheet(wb, sheet="Sheet2", header=TRUE, startRow=2, startCol=7, endCol=8, forceConversion=T)
icp_ntnu <-cbind(icp_seq, icp_cat, NTNU)
names(icp_ntnu)[2:3] <- c("COICOP1","COICOP2")
names(icp_ntnu)[5] <- "ICP_Heading"
source("Process_WB.R")  # Read in the function 'processWBscript' and resulting mtxs for 4 countries
wb <- XLConnect::loadWorkbook("H:/MyDocuments/IO work/Bridging/CES-COICOP/ICP_EXIO_Qual_UN_Edited.xlsx")
bridge_ICP_EXIO_q  <- XLConnect::readWorksheet(wb, "ICP_EXIO_Qual_UN2", header=TRUE,
forceConversion=T, endCol=201)
ICP_catnames <- bridge_ICP_EXIO_q[,1]
source("Generate_base_ICP-EXIO_mapping.R")
n_sector_icp <- 151  # Num of ICP sectors
n_sector_icp_fuel <- n_sector_icp + dim(DLE_fuelnames_std)[1]
### Read in ICP heading number following NTNU 109 mapping (not 100%, some ICP headings are aggregated) ###
Mapping <- system.file("ICP_SEQ.xlsx", package = "XLConnect")
wb <- XLConnect::loadWorkbook("H:/MyDocuments/IO work/Bridging/CES-COICOP/Worldbank/ICP_SEQ.xls")
# I added 'Sheet2' and fixed some mis-categorizations for my needs.
icp_seq <- XLConnect::readWorksheet(wb, sheet="Sheet2", header=TRUE, startRow=2, startCol=1, endCol=1, forceConversion=T)
icp_cat <- XLConnect::readWorksheet(wb, sheet="Sheet2", header=FALSE, startRow=3, startCol=3, endCol=4, forceConversion=T)
NTNU <- XLConnect::readWorksheet(wb, sheet="Sheet2", header=TRUE, startRow=2, startCol=7, endCol=8, forceConversion=T)
icp_ntnu <-cbind(icp_seq, icp_cat, NTNU)
names(icp_ntnu)[2:3] <- c("COICOP1","COICOP2")
names(icp_ntnu)[5] <- "ICP_Heading"
source("Process_WB.R")  # Read in the function 'processWBscript' and resulting mtxs for 4 countries
source("Map_CES_COICOP.R")
d fuel
# Number of fuel types in 13 DLE-harmonized classification
n_CES_fuel <- dim(DLE_fuel_sector_Q)[2]
#############################
### 1.1.1. IND1 by decile ###
#############################
# Remove tax observations from DB
IND_FD_code <- IND_FD[-grep("taxes", IND_FD$item, ignore.case = TRUE), ]
# Merge sector code info
IND_FD_code <- merge(IND_FD_code[1:(dim(IND_FD_code)[1]-n_CES_fuel),], IND_map %>% select(CODE, item=ITEM_DLE),
by="item", all.x = TRUE) %>% arrange(CODE) %>%
rbind(IND_FD[-(1:(dim(IND_FD)[1]-n_CES_fuel)),]%>% mutate(CODE=999))    # Fuels are temprarily assigned to 999. (not used)
# Replace NAs with zeros
IND_FD_code[is.na(IND_FD_code)] <- 0
IND_FD <- readFinalDemandfromDBbyDecile('IND1')
save(IND_FD, file="H:/MyDocuments/IO work/DLE_scripts/Saved tables/IND_FD.Rda")
load(file="H:/MyDocuments/IO work/DLE_scripts/Saved tables/IND_FD.Rda")
d fuel
# Number of fuel types in 13 DLE-harmonized classification
n_CES_fuel <- dim(DLE_fuel_sector_Q)[2]
#############################
### 1.1.1. IND1 by decile ###
#############################
# Remove tax observations from DB
IND_FD_code <- IND_FD[-grep("taxes", IND_FD$item, ignore.case = TRUE), ]
# Merge sector code info
IND_FD_code <- merge(IND_FD_code[1:(dim(IND_FD_code)[1]-n_CES_fuel),], IND_map %>% select(CODE, item=ITEM_DLE),
by="item", all.x = TRUE) %>% arrange(CODE) %>%
rbind(IND_FD[-(1:(dim(IND_FD)[1]-n_CES_fuel)),]%>% mutate(CODE=999))    # Fuels are temprarily assigned to 999. (not used)
# Replace NAs with zeros
IND_FD_code[is.na(IND_FD_code)] <- 0
?crossprod
dim(CES_ICP_IND)
dim(as.matrix(IND_FD_ALL[1:(dim(IND_FD_ALL)[1]-n_CES_fuel),-c(1,2), with=FALSE])) %>%
rbind(as.matrix(IND_FD_ALL[-(1:(dim(IND_FD_ALL)[1]-n_CES_fuel)),-c(1,2) , with=FALSE]))
load(file="H:/MyDocuments/IO work/DLE_scripts/Saved tables/IND_HH.Rda")
load(file="H:/MyDocuments/IO work/DLE_scripts/Saved tables/IND_AllHHConsump.Rda")
load(file="H:/MyDocuments/IO work/DLE_scripts/Saved tables/IND1_FUEL_Alldata.Rda")
a<- load(file="H:/MyDocuments/IO work/DLE_scripts/Saved tables/IND1_FUEL_Alldata.Rda")
a
load(file="H:/MyDocuments/IO work/DLE_scripts/Saved tables/IND_FD_harmonized.Rda")
IND_FD_AllHH_2011 <- IND_FD_ICP_AllHH * PPP_IND / CPI_ratio_IND / EXR_IND    # From USD 2010 PPP to USD 2007 (MER)
IND_FD_ICP_AllHH <- IND_FD_AllHH_2011 / IND_con_grwth   # to USD 2007 (MER)   # An estimate for hh consumption in 2007
indirect_El_int
indir.elec.nat <- colSums(indirect_El_int)/colSums(indirect_E_int)
# indir.elec.share <- colSums(indirect_El_int)/colSums(indirect_use_int)  # looks good but renewable electricity shouldn't not be included
# 2. (Embodied fossil Elec)/(all Embodied carrier use)
indir.elec.share <- colSums(indirect_El_int[c(1,2,6,7),])/colSums(indirect_use_int)  # only fossil electricity
# 3. (Embodied expenditure on fossil Elec)/(all Embodied energy expenditure)
FossilElecExpenShare <- function(L_vec) {
indirec.input <- rowSums(matrix(L_vec, ncol=48))
share <- sum(indirec.input[fossil.elec.idx.ex]) / sum(indirec.input[energy.carrier.idx.ex])
return(share)
}
indir.elec.share <- apply(L_inverse, 2, FossilElecExpenShare)  # only fossil electricity
dir.elec.share[is.nan(dir.elec.share)] <- 0
indir.elec.nat[is.nan(indir.elec.nat)] <- 0
indir.elec.share[is.nan(indir.elec.share)] <- 0
?read_xlsx
fuel_price.industry <- read_xlsx("H:/MyDocuments/Analysis/Final energy/Fuel price/unlinked_countries_2017_06.xlsx", sheet=2, skip=2)
View(fuel_price.industry)
fuel_price.industry <- read_xlsx("H:/MyDocuments/Analysis/Final energy/Fuel price/unlinked_countries_2017_06.xlsx", sheet=2, skip=2) %>%
select(-c(2:6))
names(fuel_price.industry) <- c("country", "ng", "oil", "coal", "elec", "oilprod")
fuel_price.industry <- fuel_price.industry %>% filter(country=="India" || country=="Brazil")
fuel_price.industry <- read_xlsx("H:/MyDocuments/Analysis/Final energy/Fuel price/unlinked_countries_2017_06.xlsx", sheet=2, skip=2) %>%
select(-c(2:6))
names(fuel_price.industry) <- c("country", "ng", "oil", "coal", "elec", "oilprod")
>?filter
filter
?filter
fuel_price.industry <- read_xlsx("H:/MyDocuments/Analysis/Final energy/Fuel price/unlinked_countries_2017_06.xlsx", sheet=2, skip=2) %>%
select(-c(2:6))
names(fuel_price.industry) <- c("country", "ng", "oil", "coal", "elec", "oilprod")
fuel_price.industry <- fuel_price.industry %>% filter(country=="India" | country=="Brazil")
energy.carrier.idx.ex
exio_coal <- c(20:27, 91)
exio_oil <- 28
exio_ng <- c(29:31)
exio_elec <- c(128:139)
exio_oilprod <- c(64:84, 92:95)  # Biofuel included
exio_energy <- c(exio_coal, exio_oil, exio_ng, exio_elec, exio_oilprod)
exio_energy
fossil.elec.idx.ex
fuel_price.industry <- read_xlsx("H:/MyDocuments/Analysis/Final energy/Fuel price/unlinked_countries_2017_06.xlsx", sheet=2, skip=2) %>%
select(-c(2:6))
names(fuel_price.industry) <- c("country", "ng", "oil", "coal", "elec", "oilprod")
fuel_price.industry <- fuel_price.industry %>% filter(country=="India" | country=="Brazil")
fuel_price.industry
FossilElecExpenShare <- function(L_vec) {
indirec.input <- rowSums(matrix(L_vec, ncol=48))
share <- (sum(indirec.input[fossil.elec.idx.ex]) / fuel_price.industry$elec[1]) /
(sum(indirec.input[exio_coal]) / fuel_price.industry$coal[1] +
sum(indirec.input[exio_ng]) / fuel_price.industry$ng[1] +
sum(indirec.input[exio_oil]) / fuel_price.industry$oil[1] +
sum(indirec.input[exio_elec) / fuel_price.industry$elec[1] +
sum(indirec.input[exio_oilprod]) / fuel_price.industry$oilprod[1])  # Nuclear expenditure is anyway not included in L inv.
return(share)
}
FossilElecExpenShare <- function(L_vec) {
indirec.input <- rowSums(matrix(L_vec, ncol=48))
share <- (sum(indirec.input[fossil.elec.idx.ex]) / fuel_price.industry$elec[1]) /
(sum(indirec.input[exio_coal]) / fuel_price.industry$coal[1] +
sum(indirec.input[exio_ng]) / fuel_price.industry$ng[1] +
sum(indirec.input[exio_oil]) / fuel_price.industry$oil[1] +
sum(indirec.input[exio_elec]) / fuel_price.industry$elec[1] +
sum(indirec.input[exio_oilprod]) / fuel_price.industry$oilprod[1])  # Nuclear expenditure is anyway not included in L inv.
return(share)
}
indir.elec.share <- apply(L_inverse, 2, FossilElecExpenShare)  # only fossil electricity
fuel_price.industry <- read_xlsx("H:/MyDocuments/Analysis/Final energy/Fuel price/unlinked_countries_2017_06.xlsx", sheet=2, skip=2) %>%
select(-c(2:6))
fuel_price.industry <- read_xlsx("H:/MyDocuments/Analysis/Final energy/Fuel price/unlinked_countries_2017_06.xlsx", sheet=2, skip=2) %>%
select(-c(3:6))
fuel_price.industry <- read_xlsx("H:/MyDocuments/Analysis/Final energy/Fuel price/unlinked_countries_2017_06.xlsx", sheet=2, skip=2) %>%
select(-c(1, 3:6))
names(fuel_price.industry) <- c("country", "ng", "oil", "coal", "elec", "oilprod")
head(indir.elec.share)
350e15/e6
350e15/1e6
350e15/1e9
7.8e15/1e9
16.8e15/1e9
n
indir.elec.share[is.nan(indir.elec.share)] <- 0
indir.fin.eng.int.derived <- IEA.final.tot.2007 / sum(a %*% rowSums(final_demand)) * a    # ind.fe.int * final.demand = total final energy (global)
IEA.final.tot.2007 <- 3.51e8 # GJ without own use  # 3.84e8 (with own use)
IEA.final.IND.2007 <- 16.8e6 # GJ without own use
IEA.final.BRA.2007 <- 7.86e6 # GJ without own use
indir.fin.eng.int.derived <- IEA.final.tot.2007 / sum(a %*% rowSums(final_demand)) * a    # ind.fe.int * final.demand = total final energy (global)
a <- t((1-indir.elec.share) * t(indirect_E_int))
indir.fin.eng.int.derived <- IEA.final.tot.2007 / sum(a %*% rowSums(final_demand)) * a    # ind.fe.int * final.demand = total final energy (global)
view(data.frame(EXIO=t(EX_catnames), #pri.final.ratio.dir=pri.final.ratio.dir[IND_idx_ex],
indir.elec.share=indir.elec.share[IND_idx_ex],
int.pri.nat=intensity.sum.IND$tot.p.nat,
indir.fin.eng.int=colSums(indirect_fE_int[,IND_idx_ex]),
indir.fin.eng.int.derived=colSums(indir.fin.eng.int.derived)[IND_idx_ex]))
intensity.sum.IND <- data.frame(num=1:200, EXIO=t(EX_catnames),
dir.el=colSums(elec_int[,IND_idx_ex]),
dir.f=colSums(f_energy_int[,IND_idx_ex]),
dir.p.nat=colSums(energy_int[,IND_idx_ex]),
dir.p.use=colSums(p_energy_int[,IND_idx_ex]),
tot.el=colSums(indirect_El_int[,IND_idx_ex]),
tot.f=colSums(indirect_fE_int[,IND_idx_ex]),
tot.p.nat=colSums(indirect_E_int[,IND_idx_ex]),
# tot.p.nat.nobio=colSums(indirect_E_int.nobio[,IND_idx_ex]),
tot.p.use=colSums(indirect_pE_int[,IND_idx_ex]))
intensity.sum.BRA <- data.frame(num=1:200, EXIO=t(EX_catnames),
dir.el=colSums(elec_int[,BRA_idx_ex]),
dir.f=colSums(f_energy_int[,BRA_idx_ex]),
dir.p.nat=colSums(energy_int[,BRA_idx_ex]),
dir.p.use=colSums(p_energy_int[,BRA_idx_ex]),
tot.el=colSums(indirect_El_int[,BRA_idx_ex]),
tot.f=colSums(indirect_fE_int[,BRA_idx_ex]),
tot.p.nat=colSums(indirect_E_int[,BRA_idx_ex]),
# tot.p.nat.nobio=colSums(indirect_E_int.nobio[,BRA_idx_ex]),
tot.p.use=colSums(indirect_pE_int[,BRA_idx_ex]))
view(data.frame(EXIO=t(EX_catnames), #pri.final.ratio.dir=pri.final.ratio.dir[IND_idx_ex],
indir.elec.share=indir.elec.share[IND_idx_ex],
int.pri.nat=intensity.sum.IND$tot.p.nat,
indir.fin.eng.int=colSums(indirect_fE_int[,IND_idx_ex]),
indir.fin.eng.int.derived=colSums(indir.fin.eng.int.derived)[IND_idx_ex]))
sum(indirect_fE_int%*%rowSums(final_demand))
sum(as.matrix(L_inverse) %*% rowSums(final_demand))
sum(indirect_fE_int %*% rowSums(final_demand))
sum(indirect_fE_int %*% rowSums(final_demand[,-seq(7, 336, 7)]))
sum(indirect_pE_int %*% rowSums(final_demand[,-seq(7, 336, 7)]))
sum(indirect_E_int %*% rowSums(final_demand[,-seq(7, 336, 7)]))
dim(indir.fin.eng.int.derived)
sum(indir.fin.eng.int.derived %*% rowSums(final_demand[,-seq(7, 336, 7)]))
dim(final_demand)
sum(indir.fin.eng.int.derived %*% rowSums(final_demand[IND_idx_ex,-seq(7, 336, 7)]))
IND_idx_ex
dim(indir.fin.eng.int.derived %*% rowSums(final_demand[IND_idx_ex,-seq(7, 336, 7)]))
dim(indir.fin.eng.int.derived %*% rowSums(final_demand[,-seq(7, 336, 7)]))
sum(indir.fin.eng.int.derived[, IND_idx_ex] %*% rowSums(final_demand[IND_idx_ex,-seq(7, 336, 7)]))
sum(indir.fin.eng.int.derived[, BRA_idx_ex] %*% rowSums(final_demand[BRA_idx_ex,-seq(7, 336, 7)]))
dim(indir.elec.share)
length(indir.elec.share)
plot(indir.elec.share[IND_idx_ex])
FossilElecExpenShare <- function(L_vec) {
indirec.input <- rowSums(matrix(L_vec, ncol=48))
# share <- (sum(indirec.input[fossil.elec.idx.ex]) / fuel_price.industry$elec[1]) /
#   (sum(indirec.input[exio_coal]) / fuel_price.industry$coal[1] +
#      sum(indirec.input[exio_ng]) / fuel_price.industry$ng[1] +
#      sum(indirec.input[exio_oil]) / fuel_price.industry$oil[1] +
#      sum(indirec.input[exio_elec]) / fuel_price.industry$elec[1] +
#      sum(indirec.input[exio_oilprod]) / fuel_price.industry$oilprod[1])  # Nuclear expenditure is anyway not included in L inv.
share <- sum(indirec.input[fossil.elec.idx.ex]) / sum(indirec.input[exio_energy])
return(share)
}
indir.elec.share <- apply(L_inverse, 2, FossilElecExpenShare)  # only fossil electricity
indir.elec.share[is.nan(indir.elec.share)] <- 0
plot(indir.elec.share[IND_idx_ex])
FossilElecExpenShare <- function(L_vec) {
indirec.input <- rowSums(matrix(L_vec, ncol=48))
# share <- (sum(indirec.input[fossil.elec.idx.ex]) / fuel_price.industry$elec[1]) /
#   (sum(indirec.input[exio_coal]) / fuel_price.industry$coal[1] +
#      sum(indirec.input[exio_ng]) / fuel_price.industry$ng[1] +
#      sum(indirec.input[exio_oil]) / fuel_price.industry$oil[1] +
#      sum(indirec.input[exio_elec]) / fuel_price.industry$elec[1] +
#      sum(indirec.input[exio_oilprod]) / fuel_price.industry$oilprod[1])  # Nuclear expenditure is anyway not included in L inv.
share <- sum(indirec.input[exio_elec]) / sum(indirec.input[exio_energy]) # Monetary share
return(share)
}
indir.elec.share <- apply(L_inverse, 2, FossilElecExpenShare)  # only fossil electricity
indir.elec.share[is.nan(indir.elec.share)] <- 0
plot(indir.elec.share[IND_idx_ex])
FossilElecExpenShare <- function(L_vec) {
indirec.input <- rowSums(matrix(L_vec, ncol=48))
share <- (sum(indirec.input[fossil.elec.idx.ex]) / fuel_price.industry$elec[1]) /
(sum(indirec.input[exio_coal]) / fuel_price.industry$coal[1] +
sum(indirec.input[exio_ng]) / fuel_price.industry$ng[1] +
sum(indirec.input[exio_oil]) / fuel_price.industry$oil[1] +
sum(indirec.input[exio_elec]) / fuel_price.industry$elec[1] +
sum(indirec.input[exio_oilprod]) / fuel_price.industry$oilprod[1])  # Nuclear expenditure is anyway not included in L inv.
# share <- sum(indirec.input[exio_elec]) / sum(indirec.input[exio_energy]) # Monetary share
return(share)
}
indir.elec.share <- apply(L_inverse, 2, FossilElecExpenShare)  # only fossil electricity
indir.elec.share[is.nan(indir.elec.share)] <- 0
plot(indir.elec.share[IND_idx_ex])
indir.elec.share[IND_idx_ex]
FossilElecExpenShare <- function(L_vec) {
indirec.input <- rowSums(matrix(L_vec, ncol=48))
share <- (sum(indirec.input[fossil.elec.idx.ex]) / fuel_price.industry$elec[1]) /
(sum(indirec.input[exio_coal]) / fuel_price.industry$coal[1] +
sum(indirec.input[exio_ng]) / fuel_price.industry$ng[1] +
sum(indirec.input[exio_oil]) / fuel_price.industry$oil[1] +
sum(indirec.input[exio_elec]) / fuel_price.industry$elec[1] +
sum(indirec.input[exio_oilprod]) / fuel_price.industry$oilprod[1])  # Nuclear expenditure is anyway not included in L inv.
# share <- sum(indirec.input[exio_elec]) / sum(indirec.input[exio_energy]) # Monetary share
return(share)
}
indir.elec.share <- apply(L_inverse, 2, FossilElecExpenShare)  # only fossil electricity
indir.elec.share
fuel_price.industry <- read_xlsx("H:/MyDocuments/Analysis/Final energy/Fuel price/unlinked_countries_2017_06.xlsx", sheet=2, skip=2) %>%
select(-c(1, 3:6))
names(fuel_price.industry) <- c("country", "ng", "oil", "coal", "elec", "oilprod")
fuel_price.industry <- fuel_price.industry %>% filter(country=="IND" | country=="BRA")
fuel_price.industry
exio_ng
fossil.elec.idx.ex
fuel_price.industry$elec[1]
oilprod
exio_oilprod
indir.elec.share <- apply(L_inverse, 2, FossilElecExpenShare)  # only fossil electricity
head(indir.elec.share)
indir.elec.share[is.nan(indir.elec.share)] <- 0
indir.elec.share
plot(indir.elec.share[IND_idx_ex])
dim(indirect_El_int)
indir.elec.share <- colSums(indirect_El_int[c(1,2,6),])/colSums(indirect_use_int)  # only fossil electricity
indir.elec.share[is.nan(indir.elec.share)] <- 0
plot(indir.elec.share[IND_idx_ex])
sum(tot.useE.elec)/sum(tot.priE.sect)
sum(tot.priE.sect)
sum(tot.useE.elec)
fuel_price.industry <- read_xlsx("H:/MyDocuments/Analysis/Final energy/Fuel price/unlinked_countries_2017_06.xlsx", sheet=2, skip=2) %>%
select(-c(1, 3:6))
names(fuel_price.industry) <- c("country", "ng", "oil", "coal", "elec", "oilprod")
fuel_price.industry <- fuel_price.industry %>% filter(country=="IND" | country=="BRA")
# Derive fossil elec share for all 9600 exio sectors
FossilElecExpenShare <- function(L_vec) {
indirec.input <- rowSums(matrix(L_vec, ncol=48))
share <- (sum(indirec.input[fossil.elec.idx.ex]) / fuel_price.industry$elec[1]) /
(sum(indirec.input[exio_coal]) / fuel_price.industry$coal[1] +
sum(indirec.input[exio_ng]) / fuel_price.industry$ng[1] +
sum(indirec.input[exio_oil]) / fuel_price.industry$oil[1] +
sum(indirec.input[exio_elec]) / fuel_price.industry$elec[1] +
sum(indirec.input[exio_oilprod]) / fuel_price.industry$oilprod[1])  # Nuclear expenditure is anyway not included in L inv.
# share <- sum(indirec.input[exio_elec]) / sum(indirec.input[exio_energy]) # Monetary share
return(share)
}
indir.elec.share <- apply(L_inverse, 2, FossilElecExpenShare)  # only fossil electricity
indir.elec.share[is.nan(indir.elec.share)] <- 0
sum(indir.fin.eng.int.derived[, IND_idx_ex] %*% rowSums(final_demand[IND_idx_ex,-seq(7, 336, 7)]))
sum(indir.fin.eng.int.derived[, IND_idx_ex] %*% rowSums(final_demand[IND_idx_ex,]))
sum(indir.fin.eng.int.derived[, BRA_idx_ex] %*% rowSums(final_demand[BRA_idx_ex,-seq(7, 336, 7)]))
rowSums(matrix(L_inverse[,IND_idx_ex[1]], ncol=48))
View(t(EX_catnames), share=rowSums(matrix(L_inverse[,IND_idx_ex[1]], ncol=48)))
View(date.frame(t(EX_catnames), share=rowSums(matrix(L_inverse[,IND_idx_ex[1]], ncol=48))))
View(data.frame(t(EX_catnames), share=rowSums(matrix(L_inverse[,IND_idx_ex[1]], ncol=48))))
lsos(n=10)
rm(price_plot)
rm(pr_plot)
lsos(n=10)
rm(rice_wheat)
gc()
rm(food_items)
gc()
save.image()
