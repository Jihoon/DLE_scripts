names(Fuel_std) <- names(Fuel_summary)
a_dec <- rbind.fill(Food, OthCon) %>% rename(hhid = id) %>%
right_join(HHold) %>%
# filter(!is.na(val_tot)) %>%
# mutate(fd_tot = val_tot*weight) %>%
group_by(hhid, item) %>%
summarise(fd_tot = sum(val_tot, na.rm = TRUE)) %>% # Non-weighted FD (to get energy/cap)
spread(hhid, fd_tot)
a_dec[,-1] <- NAer(a_dec[,-1])
a_dec <- a_dec %>% rbind(Fuel_std)
return(list(a_dec, HHold))
}
BRA_FD <- readFinalDemandfromDBbyDecile('BRA0')
debugSource('H:/MyDocuments/IO work/DLE_scripts/Read_final_demand_from_DB.R')
BRA_FD <- readFinalDemandfromDBbyDecile('BRA0')
HHold <- selectDBdata(ID, WEIGHT, INCOME, CONSUMPTION, EXPENDITURE, tables=c(paste0(svy, '_HH')))
income_proxy <- income
debugSource('H:/MyDocuments/IO work/DLE_scripts/Read_final_demand_from_DB.R')
debugSource('H:/MyDocuments/IO work/DLE_scripts/Read_final_demand_from_DB.R')
debugSource('H:/MyDocuments/IO work/DLE_scripts/Read_final_demand_from_DB.R')
BRA_FD <- readFinalDemandfromDBbyDecile('BRA0')
debugSource('H:/MyDocuments/IO work/DLE_scripts/Read_final_demand_from_DB.R')
BRA_FD <- readFinalDemandfromDBbyDecile('BRA0')
print(sum(is.na(HHold$income)))
str(BRA_FD)
readFinalDemandfromDBAllHH = function(svy='IND1') {
xlcFreeMemory()
Food <- selectDBdata(ID, ITEM, VAL_TOT, tables=c(paste0(svy, '_FOOD')))
xlcFreeMemory()
OthCon <- selectDBdata(ID, ITEM, VAL_TOT, tables=c(paste0(svy, '_OTHCON')))
xlcFreeMemory()
Fuel <- selectDBdata(ID, FUEL, VAL_TOT, QTY_TOT, UNIT, tables=c(paste0(svy, '_FUEL')))
xlcFreeMemory()
if (grep("BRA", svy)) {
HHold <- selectDBdata(ID, WEIGHT, INCOME, CONSUMPTION, EXPENDITURE, tables=c(paste0(svy, '_HH')))
# income_proxy <- income
}
else {
HHold <- selectDBdata(ID, WEIGHT, CONSUMPTION, CONSUMPTION, EXPENDITURE, tables=c(paste0(svy, '_HH')))
names(HHold)[3] <- "income"
}
xlcFreeMemory()
# Fuel <- Fuel %>% rename(item = fuel)
print(sum(is.na(HHold$income)))
HHold <- HHold %>% rename(hhid = id) %>%
arrange(income) %>%
mutate(cumpop = cumsum(weight)/sum(HHold$weight)) %>%
mutate(decile = cut(cumpop, breaks = seq(0, 1, 0.1),
labels=paste0("decile", 1:10), include.lowest = TRUE, ordered=TRUE))  %>%
filter(!is.na(income))
print(sum(is.na(HHold$income)))
Fuel_summary <- Fuel %>% rename(hhid = id) %>%
right_join(HHold) %>%    # Using right_join to keep all the IDs and matching columns with a_dec
# mutate(fd_tot =val_tot*weight) %>%
group_by(hhid, fuel) %>%
summarise(fd_tot=sum(val_tot, na.rm = TRUE)) %>% arrange(fuel)
Fuel_summary <- Fuel_summary %>%
rbind.fill(data.frame(fuel = DLE_fuel_types, fd_tot=0)) %>%
rename(item = fuel) %>%
spread(hhid, fd_tot) %>%
filter(!is.na(item)) %>% select(-which(names(.)=="<NA>"))
# Fuel_summary[is.na(Fuel_summary)] <- 0
Fuel_summary[,-1] <- NAer(Fuel_summary[,-1])
Fuel_std <- data.frame(item=rownames(bridge_fuel_EXIO_q),
t(DLE_fuel_sector_Q) %*% as.matrix(Fuel_summary[,-1]))
names(Fuel_std) <- names(Fuel_summary)
a_dec <- rbind.fill(Food, OthCon) %>% rename(hhid = id) %>%
right_join(HHold) %>%
# filter(!is.na(val_tot)) %>%
# mutate(fd_tot = val_tot*weight) %>%
group_by(hhid, item) %>%
summarise(fd_tot = sum(val_tot, na.rm = TRUE)) %>% # Non-weighted FD (to get energy/cap)
spread(hhid, fd_tot)
a_dec[,-1] <- NAer(a_dec[,-1])
a_dec <- a_dec %>% rbind(Fuel_std)
return(list(a_dec, HHold))
}
list[BRA_FD_ALL, BRA_HH] <- readFinalDemandfromDBAllHH('BRA0')
lsos(n=20)
rm(a)
gc()
all_HH_f <- GetHHSectoralEnergyPerCap(ICP_food_idx,'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
PlotIntensityHist(all_HH_f, "V", xmax=50, .5, drawline=FALSE)
Q
source('H:/MyDocuments/IO work/DLE_scripts/Intensity_from_UN_correspondence.R')
debug(PlotIntensityHist)
undebug(PlotIntensityHist)
all_HH_f <- GetHHSectoralEnergyPerCap(ICP_food_idx,'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
undebug(GetHHSectoralEnergyPerCap)
all_HH_f <- GetHHSectoralEnergyPerCap(ICP_food_idx,'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
PlotIntensityHist(all_HH_f, "V", xmax=50, .5, drawline=FALSE)
title('Food: Brazil', line = 2.5)
all_HH_f <- GetHHSectoralEnergyPerCap(ICP_food_idx,'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
debug(GetHHSectoralEnergyPerCap)
all_HH_f <- GetHHSectoralEnergyPerCap(ICP_food_idx,'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
str(eHH_sect)
str(eHH_sect[,1000:1007])
names(eHH_sect[,1000:1007])
all_HH_f <- GetHHSectoralEnergyPerCap(ICP_food_idx,'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
names(eHH_sect)
str(IND_HH)
source('H:/MyDocuments/IO work/DLE_scripts/Read_final_demand_from_DB.R')
BRA_FD <- readFinalDemandfromDBbyDecile('BRA0')
list[BRA_FD_ALL, BRA_HH] <- readFinalDemandfromDBAllHH('BRA0')
str()
str(BRA_HH)
all_HH_f <- GetHHSectoralEnergyPerCap(ICP_food_idx,'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
PlotIntensityHist(all_HH_f, "V", xmax=50, .5, drawline=FALSE)
PlotIntensityHist(all_HH_f, "V", xmax=50, .5, drawline=FALSE, ticksize=1)
PlotIntensityHist(all_HH_f, "V", xmax=50, .1, drawline=FALSE, ticksize=1)
title('Food: Brazil', line = 2.5)
PlotIntensityHist <- function (intens_HH, name="V", xmax, bin_size=0.1, drawline=TRUE, linedata, ticksize=10) {
xlcFreeMemory()
opar <- par()
par(mfrow=c(10,1), oma = c(0, 0, 0, 0), mar= c(2, 0, 0, 0))
for (i in 1:10) {
a <- as.matrix(intens_HH %>% filter(decile==paste0("decile",i)) %>% select(starts_with(name)))
w0 <- intens_HH$weight[intens_HH$decile==paste0("decile",i)]
w1 <- w0[rep(1:length(w0), each=dim(a)[2])]   # dim(a)[2] instead of n_draw because of non-converge runs
weighted.hist(a, w1, seq(0, max(a)+bin_size, bin_size), xlim=c(0,xmax), main=NULL, xaxis = FALSE)
# d<- density(a, weights = w1)
# plot(d, axes=FALSE, xlim=c(1,xmax), main=' ')
axis(side = 1, at = seq(0,xmax,ticksize))
if (drawline) {
abline(v=linedata[i,1], col="red")
}
}
par(opar)
}
PlotIntensityHist(all_HH_f, "V", xmax=50, .1, drawline=FALSE, ticksize=1)
dim(BRA_FD_ICP_HH_adj_EX)
(BRA_FD_ICP_HH_adj_EX)[1:40,1:10]
dim(BRA_intensity)
(BRA_intensity)[1:2,]
(BRA_intensity)[1,]
cbind((BRA_intensity)[1,1:40], (BRA_FD_ICP_HH_adj_EX)[1:40,1:10])
View(cbind((BRA_intensity)[1,1:40], (BRA_FD_ICP_HH_adj_EX)[1:40,1:10]))
dim(all_HH_f)
(all_HH_f)[1:10,1:10]
(all_HH_f)[1:10,1:10, with=FALSE]
(all_HH_f)[1:100,1:10, with=FALSE]
View(cbind((BRA_intensity)[1,1:40], (BRA_FD_ICP_HH_adj_EX)[1:40,1:40]))
sum(BRA_FD_ICP_HH_adj_EX[,1]==0)
dim(BRA_FD_ICP_HH_adj_EX)
colSums(BRA_FD_ICP_HH_adj_EX[1:40,])
sum(colSums(BRA_FD_ICP_HH_adj_EX[1:40,])==0)
dim(BRA_FD_ICP_HH_adj_EX)
length(colSums(BRA_FD_ICP_HH_adj_EX[ICP_food_idx,])==0)
dim(BRA_FD_ICP_HH_adj_EX)
dim(all_HH_f)
which(colSums(BRA_FD_ICP_HH_adj_EX[ICP_food_idx,])==0)
all_HH_f[which(colSums(BRA_FD_ICP_HH_adj_EX[ICP_food_idx,])==0),] <- NULL  # Remove HH with no food spending
all_HH_f <- all_HH_f[which(colSums(BRA_FD_ICP_HH_adj_EX[ICP_food_idx,])!=0),]   # Remove HH with no food spending
PlotIntensityHist(all_HH_f, "V", xmax=50, .2, drawline=FALSE, ticksize=1)
title('Food: Brazil', line = 2.5)
# All
PlotIntensityHist <- function (intens_HH, name="V", xmax, bin_size=0.1, drawline=TRUE, linedata, ticksize=10) {
xlcFreeMemory()
opar <- par()
par(mfrow=c(10,1), oma = c(0, 0, 0, 0), mar= c(2, 0, 0, 0))
for (i in 1:10) {
a <- as.matrix(intens_HH %>% filter(decile==paste0("decile",i)) %>% select(starts_with(name)))
w0 <- intens_HH$weight[intens_HH$decile==paste0("decile",i)]
w1 <- w0[rep(1:length(w0), each=dim(a)[2])]   # dim(a)[2] instead of n_draw because of non-converge runs
# weighted.hist(a, w1, seq(0, max(a)+bin_size, bin_size), xlim=c(0,xmax), main=NULL, xaxis = FALSE)
d<- density(a, weights = w1)
plot(d, axes=FALSE, xlim=c(1,xmax), main=' ')
axis(side = 1, at = seq(0,xmax,ticksize))
if (drawline) {
abline(v=linedata[i,1], col="red")
}
}
par(opar)
}
xlcFreeMemory()
PlotIntensityHist(all_HH_f, "V", xmax=50, .2, drawline=FALSE, ticksize=1)
lsos(n=20)
rm(all_HH_hs_IN)
gc()
all_HH_hs <- GetHHSectoralEnergyPerCap(ICP_hhold_idx,'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
PlotIncomeByCountry(BRA_HH, 80, .05, 5)
pdf(file = paste0(figure_path, "Annual household consumption total - Brazil.pdf"), width = 7, height = 9)
PlotIncomeByCountry(BRA_HH, 80, .05, 5)
title('Brazil in thousand USD (2010 PPP)', line = 2.5)
dev.off()
pdf(file = paste0(figure_path, "Annual household consumption total - Brazil.pdf"), width = 7, height = 9)
PlotIncomeByCountry(BRA_HH, 100, .05, 5)
title('Brazil in thousand USD (2010 PPP)', line = 2.5)
dev.off()
gc()
xlcFreeMemory()
all_HH_hs <- GetHHSectoralEnergyPerCap(ICP_hhold_idx,'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
undebug()
undebug(GetHHSectoralEnergyPerCap)
all_HH_hs <- GetHHSectoralEnergyPerCap(ICP_hhold_idx,'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
all_HH_svc <- GetHHSectoralEnergyPerCap(ICP_svc_idx,'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
PlotIntensityHist(all_HH_hs, "V", xmax=50, .2, drawline=FALSE)
PlotIntensityHist(all_HH_svc, "V", xmax=50, 0.2, drawline=FALSE)
# Sectoral
GetHHSectoralEnergyPerCap <- function(idx, country='IND', fd_HH, int_sect) {
xlcFreeMemory()
# fd_HH <- icp_fd_cty_usd <- eval(parse(text=paste0(country, "_FD_ICP_usd2007")))
eHH_sect <- t(int_sect[,idx, drop=FALSE] %*% fd_HH[idx, , drop=FALSE] / 1000) # MJ to GJ / HH
idx_end <- dim(eHH_sect)[2]
xlcFreeMemory()
eHH_sect <- data.table(hhid = colnames(fd_HH), eHH_sect)
setkey(eHH_sect, hhid)
xlcFreeMemory()
cty_HH <- eval(parse(text=paste0(country, "_HH")))
eHH_sect <- merge(eHH_sect, cty_HH, by="hhid")
setkey(eHH_sect, hhid, consumption)
xlcFreeMemory()
eHH_cap_sect <- eHH_sect
eHH_cap_sect[, 2:idx_end := eHH_cap_sect[,2:idx_end, with=FALSE] / hh_size, with=FALSE]  # idx_end instead of (n_draw+1) because of no-converge runs
eHH_cap_sd <- data.table(hhid = eHH_cap_sect[,1],
sd = apply(eHH_cap_sect[,2:idx_end, with=FALSE], 1, sd),
eHH_cap_sect[,(idx_end+1):dim(eHH_sect)[2], with=FALSE])
return(list(eHH_cap_sect, eHH_cap_sd))
# return(eHH_cap_sect)
}
list[all_HH_hs, sd_hs] <- GetHHSectoralEnergyPerCap(ICP_hhold_idx,'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
str(sd_hs)
(sd_hs)$hhid[1:10]
# Sectoral
GetHHSectoralEnergyPerCap <- function(idx, country='IND', fd_HH, int_sect) {
xlcFreeMemory()
# fd_HH <- icp_fd_cty_usd <- eval(parse(text=paste0(country, "_FD_ICP_usd2007")))
eHH_sect <- t(int_sect[,idx, drop=FALSE] %*% fd_HH[idx, , drop=FALSE] / 1000) # MJ to GJ / HH
idx_end <- dim(eHH_sect)[2]
xlcFreeMemory()
eHH_sect <- data.table(hhid = colnames(fd_HH), eHH_sect)
setkey(eHH_sect, hhid)
xlcFreeMemory()
cty_HH <- eval(parse(text=paste0(country, "_HH")))
eHH_sect <- merge(eHH_sect, cty_HH, by="hhid")
setkey(eHH_sect, hhid, consumption)
xlcFreeMemory()
eHH_cap_sect <- eHH_sect
eHH_cap_sect[, 2:idx_end := eHH_cap_sect[,2:idx_end, with=FALSE] / hh_size, with=FALSE]  # idx_end instead of (n_draw+1) because of no-converge runs
eHH_cap_sd <- data.table(hhid = colnames(fd_HH),
sd = apply(eHH_cap_sect[,2:idx_end, with=FALSE], 1, sd),
eHH_cap_sect[,(idx_end+1):dim(eHH_sect)[2], with=FALSE])
return(list(eHH_cap_sect, eHH_cap_sd))
# return(eHH_cap_sect)
}
list[all_HH_hs, sd_hs] <- GetHHSectoralEnergyPerCap(ICP_hhold_idx,'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
str(sd_hs)
PlotIntensityHist(sd_hs, "sd", xmax=10, .01, drawline=FALSE)
PlotIntensityHist <- function (intens_HH, name="V", xmax, bin_size=0.1, drawline=TRUE, linedata, ticksize=10) {
xlcFreeMemory()
opar <- par()
par(mfrow=c(10,1), oma = c(0, 0, 0, 0), mar= c(2, 0, 0, 0))
for (i in 1:10) {
a <- as.matrix(intens_HH %>% filter(decile==paste0("decile",i)) %>% select(starts_with(name)))
w0 <- intens_HH$weight[intens_HH$decile==paste0("decile",i)]
w1 <- w0[rep(1:length(w0), each=dim(a)[2])]   # dim(a)[2] instead of n_draw because of non-converge runs
weighted.hist(a, w1, seq(0, max(a)+bin_size, bin_size), xlim=c(0,xmax), main=NULL, xaxis = FALSE)
# d<- density(a, weights = w1)
# plot(d, axes=FALSE, xlim=c(1,xmax), main=' ')
axis(side = 1, at = seq(0,xmax,ticksize))
if (drawline) {
abline(v=linedata[i,1], col="red")
}
}
par(opar)
}
PlotIntensityHist(sd_hs, "sd", xmax=10, .01, drawline=FALSE)
PlotIntensityHist(sd_hs, "sd", xmax=5, .01, drawline=FALSE, ticksize=0.2)
which(colSums(BRA_FD_ICP_HH_adj_EX[ICP_hhold_idx,])==0)
dim(sd_hs)
(sd_hs)$sd
PlotIntensityHist(sd_hs, "sd", xmax=5, .001, drawline=FALSE, ticksize=0.2)
dim(all_HH_hs)
(all_HH_hs)[1:100, 1:10, with=FALSE]
sd_hs$sd[1:100]
sd_hs$sd[1:200]
which(sd_hs$sd==0)
sd_hs$sd[150:200]
(all_HH_hs)[150:200, 1:10, with=FALSE]
which(sd_hs$sd==0)
sd_hs[sd_hs$sd==0,] <- NULL
sd_hs <- [sd_hs$sd!=0,]
lengthsd_hs$sd!=0
length(sd_hs$sd!=0)
dim(sd_hs)
sd_hs <- [sd_hs$sd!=0, ,with=FALSE]
class(sd_hs)
sd_hs <- sd_hs[sd_hs$sd!=0, ,with=FALSE]
sd_hs <- sd_hs[sd_hs$sd!=0, ]
PlotIntensityHist(sd_hs, "sd", xmax=5, .001, drawline=FALSE, ticksize=0.2)
which(sd_hs$sd==0)
sd_hs
sum(sd_hs$sd < 0.001)
sum(sd_hs$sd < 0.002)
PlotIntensityHist(sd_hs, "sd", xmax=5, .0002, drawline=FALSE, ticksize=0.2)
chng_pct_val_BRA <- (BRA_FD_adj_val_BRA - init_FD_BRA) / init_FD_BRA
chng_pct_val_BRA[is.nan(chng_pct_val_BRA)] <- 0
chng_pct_val_EXIO <- (BRA_FD_adj_val_EXIO - init_FD_BRA) / init_FD_BRA
chng_pct_val_EXIO[is.nan(chng_pct_val_EXIO)] <- 0
BRA_FD_ICP_HH_adj_BR <- BRA_FD_ICP_AllHH * (chng_pct_val_BRA + 1)
BRA_FD_ICP_HH_adj_EX <- BRA_FD_ICP_AllHH * (chng_pct_val_EXIO + 1)
# And two vectors for India
# init_FD_IND: Initial vector from the survey (scaled to M.USD 2007 MER)
# IND_FD_adj: Adjusted by rIPFP based on EXIO default valuation mtx
# India
chng_pct_IND <- (IND_FD_adj - init_FD_IND) / init_FD_IND
chng_pct_IND[is.nan(chng_pct_IND)] <- 0
IND_FD_ICP_HH_adj <- IND_FD_ICP_AllHH * (chng_pct_IND + 1)
# When there is an adjustment frmo 0 to non-zero values, we need to assign the non-zero values to all HH.
# I do it proportionately to match the weighted sum.
idx_inf <- which(is.infinite(chng_pct_IND))  # Identify rows with Inf adjustments
r_HH <- colSums(IND_FD_ICP_AllHH)/sum(IND_FD_ICP_AllHH)  # ratio of hh total to (unweighted) total
IND_FD_ICP_HH_adj[idx_inf,] <- t(sapply(IND_FD_adj[idx_inf] * 1e6, # M.USD to USD
function(x) x * r_HH / sum(r_HH * IND_HH$weight))) * scaler_IND
# scaler_IND needed since IND_FD_ICP_HH_adj is not scaled to match fd_exio
load("./Saved tables/BRA_intensities_val_BRA.Rda")   # Reference case
load("./Saved tables/BRA_ENEperCap_valBR_adjFD.Rda")
SummarizeGJPerCapByDecile(eHH_BRA)
eHH_BRA  <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
SummarizeGJPerCapByDecile(eHH_BRA)
list[eHH_BRA, eHH_sd]  <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
dim(eHH_BRA)
hist(eHH_sd$sd)
summary(eHH_sd$sd)
PlotIntensityHist(eHH_BRA, "V", xmax=200, 0.1, linedata=a)
list[eHH_BRA, eHH_sd]  <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
load("./Saved tables/BRA_intensities_val_BRA.Rda")   # Reference case
list[eHH_BRA, eHH_sd]  <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
SummarizeGJPerCapByDecile(eHH_BRA)
eHH_BRA[1,]
sd(eHH_BRA[1,2:1000])
sd(eHH_BRA[1,2:999)
sd(eHH_BRA[1,2:999])
sd(eHH_BRA[1,2:999, with=FALSE])
sd(eHH_BRA[1,2:1000, with=FALSE])
sd(eHH_BRA[1,2:1001, with=FALSE])
eHH_BRA[,1001]
eHH_BRA[1:100,1001, with=FALSE]
eHH_sd$sd[1:100]
eHH_IND[1,1000:1007, with=FALSE
]
eHH_IND[1,990:1007, with=FALSE
]
108/5
debug(GetHHSectoralEnergyPerCap)
list[eHH_BRA, eHH_sd]  <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
dim(eHH_sect)
# Sectoral
GetHHSectoralEnergyPerCap <- function(idx, country='IND', fd_HH, int_sect) {
xlcFreeMemory()
# fd_HH <- icp_fd_cty_usd <- eval(parse(text=paste0(country, "_FD_ICP_usd2007")))
eHH_sect <- t(int_sect[,idx, drop=FALSE] %*% fd_HH[idx, , drop=FALSE] / 1000) # MJ to GJ / HH
xlcFreeMemory()
eHH_sect <- data.table(hhid = colnames(fd_HH), eHH_sect)
idx_end <- dim(eHH_sect)[2]
setkey(eHH_sect, hhid)
xlcFreeMemory()
cty_HH <- eval(parse(text=paste0(country, "_HH")))
eHH_sect <- merge(eHH_sect, cty_HH, by="hhid")
setkey(eHH_sect, hhid, consumption)
xlcFreeMemory()
eHH_cap_sect <- eHH_sect
eHH_cap_sect[, 2:idx_end := eHH_cap_sect[,2:idx_end, with=FALSE] / hh_size, with=FALSE]  # idx_end instead of (n_draw+1) because of no-converge runs
eHH_cap_sd <- data.table(hhid = colnames(fd_HH),
sd = apply(eHH_cap_sect[,2:idx_end, with=FALSE], 1, sd),
eHH_cap_sect[,(idx_end+1):dim(eHH_sect)[2], with=FALSE])
return(list(eHH_cap_sect, eHH_cap_sd))
# return(eHH_cap_sect)
}
load("./Saved tables/BRA_intensities_val_BRA.Rda")   # Reference case
list[eHH_BRA, eHH_sd]  <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
a <- SummarizeGJPerCapByDecile(eHH_BRA)
a
# All
PlotIntensityHist <- function (intens_HH, name="V", xmax, bin_size=0.1, drawline=TRUE, linedata, ticksize=10) {
xlcFreeMemory()
opar <- par()
par(mfrow=c(10,1), oma = c(0, 0, 0, 0), mar= c(2, 0, 0, 0))
for (i in 1:10) {
a <- as.matrix(intens_HH %>% filter(decile==paste0("decile",i)) %>% select(starts_with(name)))
w0 <- intens_HH$weight[intens_HH$decile==paste0("decile",i)]
w1 <- w0[rep(1:length(w0), each=dim(a)[2])]   # dim(a)[2] instead of n_draw because of non-converge runs
# weighted.hist(a, w1, seq(0, max(a)+bin_size, bin_size), xlim=c(0,xmax), main=NULL, xaxis = FALSE)
d<- density(a, weights = w1)
plot(d, axes=FALSE, xlim=c(1,xmax), main=' ')
axis(side = 1, at = seq(0,xmax,ticksize))
if (drawline) {
abline(v=linedata[i,1], col="red")
}
}
par(opar)
}
PlotIntensityHist(eHH_BRA, "V", xmax=200, 0.1, linedata=a)
a
ICP_all_idx <- 1:164
eHH_summary <- data.frame(dec = paste0('dec',1:10))
load("./Saved tables/BRA_intensities_val_EXIO.Rda")
list[eHH_BRA, eHH_sd]   <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'BRA', BRA_FD_ICP_AllHH, BRA_intensity)
a <- SummarizeGJPerCapByDecile(eHH_BRA)
eHH_summary <- cbind(eHH_summary, a)
PlotIntensityHist(eHH_BRA, "V", xmax=200, bin_size=0.1, linedata=a)
# save(eHH_BRA, file="./Saved tables/BRA_ENEperCap_valEX_orgFD.Rda")
load("./Saved tables/BRA_intensities_val_BRA.Rda")
list[eHH_BRA, eHH_sd]   <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'BRA', BRA_FD_ICP_AllHH, BRA_intensity)
# par(new = TRUE)
a <- SummarizeGJPerCapByDecile(eHH_BRA)
eHH_summary <- cbind(eHH_summary, a)
PlotIntensityHist(eHH_BRA, "V", xmax=200, 0.1, linedata=a)
# save(eHH_BRA, file="./Saved tables/BRA_ENEperCap_valBR_orgFD.Rda")
load("./Saved tables/BRA_intensities_val_EXIO.Rda")
list[eHH_BRA, eHH_sd]   <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'BRA', BRA_FD_ICP_HH_adj_BR, BRA_intensity)
# par(new = TRUE)
a <- SummarizeGJPerCapByDecile(eHH_BRA)
eHH_summary <- cbind(eHH_summary, a)
PlotIntensityHist(eHH_BRA, "V", xmax=200, 0.1, linedata=a)
# save(eHH_BRA, file="./Saved tables/BRA_ENEperCap_valEX_adjFD.Rda")
load("./Saved tables/BRA_intensities_val_BRA.Rda")   # Reference case
list[eHH_BRA, eHH_sd] <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
# par(new = TRUE)
a <- SummarizeGJPerCapByDecile(eHH_BRA)
eHH_summary <- cbind(eHH_summary, a)
PlotIntensityHist(eHH_BRA, "V", xmax=200, 0.1, linedata=a)
# save(eHH_BRA, file="./Saved tables/BRA_ENEperCap_valBR_adjFD.Rda")
View(eHH_summary)
eHH_summary <- data.frame(dec = paste0('dec',1:10))
# Brazil
load("./Saved tables/BRA_intensities_val_EXIO.Rda")
list[eHH_BRA, eHH_sd]   <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'BRA', BRA_FD_ICP_AllHH, BRA_intensity)
a <- SummarizeGJPerCapByDecile(eHH_BRA)
eHH_summary <- cbind(eHH_summary, a)
PlotIntensityHist(eHH_BRA, "V", xmax=200, bin_size=0.1, linedata=a)
# save(eHH_BRA, file="./Saved tables/BRA_ENEperCap_valEX_orgFD.Rda")
load("./Saved tables/BRA_intensities_val_BRA.Rda")
list[eHH_BRA, eHH_sd]   <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'BRA', BRA_FD_ICP_AllHH, BRA_intensity)
# par(new = TRUE)
a <- SummarizeGJPerCapByDecile(eHH_BRA)
eHH_summary <- cbind(eHH_summary, a)
PlotIntensityHist(eHH_BRA, "V", xmax=200, 0.1, linedata=a)
# save(eHH_BRA, file="./Saved tables/BRA_ENEperCap_valBR_orgFD.Rda")
load("./Saved tables/BRA_intensities_val_EXIO.Rda")
list[eHH_BRA, eHH_sd]   <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'BRA', BRA_FD_ICP_HH_adj_EX, BRA_intensity)
# par(new = TRUE)
a <- SummarizeGJPerCapByDecile(eHH_BRA)
eHH_summary <- cbind(eHH_summary, a)
PlotIntensityHist(eHH_BRA, "V", xmax=200, 0.1, linedata=a)
# save(eHH_BRA, file="./Saved tables/BRA_ENEperCap_valEX_adjFD.Rda")
load("./Saved tables/BRA_intensities_val_BRA.Rda")   # Reference case
list[eHH_BRA, eHH_sd] <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'BRA', BRA_FD_ICP_HH_adj_BR, BRA_intensity)
# par(new = TRUE)
a <- SummarizeGJPerCapByDecile(eHH_BRA)
eHH_summary <- cbind(eHH_summary, a)
PlotIntensityHist(eHH_BRA, "V", xmax=200, 0.1, linedata=a)
View(eHH_summary)
load("./Saved tables/IND_intensities.Rda")
eHH_IND  <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'IND', IND_FD_ICP_AllHH, IND_intensity)
list[eHH_IND, eHH_sd] <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'IND', IND_FD_ICP_AllHH, IND_intensity)
a <- SummarizeGJPerCapByDecile(eHH_IND)
lsos(n=10)
rm(eHH_BRA, all_HH_hs, all_HH_svc)
gc()
xlcFreeMemory()
list[eHH_IND, eHH_sd] <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'IND', IND_FD_ICP_AllHH, IND_intensity)
xlcFreeMemory()
rm(BRA_alloc, IND_alloc)
gC()
gc()
lsos(n=10)
lsos(n=20)
rm(result_IND)
gc()
8e8/1000/100000
IND_FD_ALL <- IND_FD_ALL_ICP
rm(IND_FD_ALL, IND_FD_ALL_ICP); gc()
rm(IND_FD_ALL, IND_FD_ALL_ICP)
gc()
lsos(n=20)
IND_FD_compare <- data.frame(ICP_catnames, init=as.integer(init_FD_IND), IN_adj=as.integer(IND_FD_adj),
IN_pct=chng_pct_IND*100)
BRA_FD_compare <- data.frame(ICP_catnames, init=as.integer(init_FD_BRA),
BR_adj=as.integer(BRA_FD_adj_val_BRA), BR_pct=chng_pct_val_BRA*100,
EX_adj=as.integer(BRA_FD_adj_val_EXIO), EX_pct=chng_pct_val_EXIO*100)
View(IND_FD_compare)
View(BRA_FD_compare)
n_draw <- 500
# Valuation mtx fixed
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
scaler_IND <- sum(IND_FD_ICP_usd2007[,1]) / sum(IND_fd_exio_pp)
init_FD_IND <- IND_FD_ICP_usd2007[,1] / scaler_IND
list[IND_intensity, IND_alloc, NC_IND, IND_FD_adj] <- DeriveIntensities('IND')
dim(IND_intensity)
IND_intensity <- IND_intensity[1:500,]
dim(IND_FD_ICP_AllHH)
list[eHH_IND, eHH_sd] <- GetHHSectoralEnergyPerCap(ICP_all_idx, 'IND', IND_FD_ICP_AllHH, IND_intensity)
gc()
a <- SummarizeGJPerCapByDecile(eHH_IND)
eHH_summary <- cbind(eHH_summary, a)
PlotIntensityHist(eHH_IND, "V", xmax=100, 0.1, linedata=a)
View(eHH_summary)
list[eHH_IND, eHH_sd] <-  GetHHSectoralEnergyPerCap(ICP_all_idx, 'IND', IND_FD_ICP_HH_adj, IND_intensity)
a <- SummarizeGJPerCapByDecile(eHH_IND)
eHH_summary <- cbind(eHH_summary, a)
View(eHH_summary)
xlcFreeMemory()
view(eHH_summary)
xlcFreeMemory()
gc()
lsos(n=20)
a<-lsos(n=20)
str(a)
row.names((a))
rm(eHH_IND, all_HH_f, final_alloc_list_IND_all,result_IND_all,final_alloc_list_IND,IND_FD_ICP_HH_adj,BRA_FD_ICP_HH_adj_BR,BRA_FD_ICP_HH_adj_EX, r_HH, mean_HH_f,mean_HH_fl)
gc()
