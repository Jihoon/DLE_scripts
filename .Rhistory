PPP_ZAF <- as.numeric(PPP %>% filter(year==2010 & iso2c=='ZA') %>% select(PA.NUS.PPP))
CES.year <- 2010 # DLE DB
IO.year <- 2010 # Pick one closest to the survey year
CPI_IND
CPI_BRA
HH_CON <- WDI(country = c("IN", "BR", "ZA"),
indicator = c(#"NE.CON.PETC.CD",
"NE.CON.PRVT.CD",
# "NE.CON.PETC.CN",
"NE.CON.PRVT.KD"),
start = 2004, end = 2011, extra = FALSE, cache = NULL)
BRA_con_grwth <- as.numeric(HH_CON %>% filter(year==2008 & iso2c=='BR') %>% select(NE.CON.PRVT.KD) / # BRA0/1
HH_CON %>% filter(year==IO.year & iso2c=='BR') %>% select(NE.CON.PRVT.KD))
IND_con_grwth <- as.numeric(HH_CON %>% filter(year==2011 & iso2c=='IN') %>% select(NE.CON.PRVT.KD) / # IND1
HH_CON %>% filter(year==IO.year & iso2c=='IN') %>% select(NE.CON.PRVT.KD))
ZAF_con_grwth <- as.numeric(HH_CON %>% filter(year==2010 & iso2c=='ZA') %>% select(NE.CON.PRVT.KD) / # ZAF1
HH_CON %>% filter(year==IO.year & iso2c=='ZA') %>% select(NE.CON.PRVT.KD))
BRA_con_grwth
IND_con_grwth
ZAF_con_grwth
names(val_mtx) <- c('FR', 'BR', 'US', 'IN', 'ZA')
val_mtx <- list(val_FR, val_BR_BR, val_US, val_IN, val_ZA)
names(val_mtx)
IO.year
paste0("L_", IO.year, ".csv")
rm(list=ls())
setwd("H:/MyDocuments/IO work/DLE_scripts")  # Change if run from OneDrive "/IIASA/DLE - Documents/WS2 - Documents/Analysis/IO/DLE_scripts/"
#################
### Constants ###
#################
### EXIO country order ###
exio_ctys <- c("AT", "BE", "BG", "CY", "CZ", "DE", "DK", "EE", "ES", "FI",
"FR", "GR",
"HR", # Added new at EXIO3
"HU", "IE", "IT", "LT", "LU", "LV", "MT", "NL",
"PL", "PT", "RO", "SE", "SI", "SK", "GB", "US", "JP", "CN",
"CA", "KR", "BR", "IN", "MX", "RU", "AU", "CH", "TR", "TW",
"NO", "ID", "ZA", "WA", "WL", "WE", "WF", "WM")
num.cty <- length(exio_ctys)
exio.len <- length(exio_ctys)*200
exio.fd.len <- length(exio_ctys)*7
n_draw <- 1000
D_val_uncertainty <- 0  # or 1 : Whether to include uncertainty analysis for valuation mtx - margins and tax rates
draw_count <- 1
options(digits=3)
# DLE DB: 2010 $ PPP
# EXIO: XXXX EUR MER
CES.year <- 2010 # DLE DB
IO.year <- 2010 # Pick one closest to the survey year.  2007 for EXIO2
# DLE DB in PPP 2010$ (PPP in terms of private consumption)
# EXIO in MER 2007
# Need this PPP rate to go back to local currency in 2010
# [LCU/$]
PPP_cty = WDI(country = c("IN", "BR", "ZA"), indicator = c("PA.NUS.PPP", "PA.NUS.PRVT.PP"), start = CES.year, end = CES.year, extra = FALSE, cache = NULL)
PPP_IND <- as.numeric(PPP_cty %>% filter(country=="India") %>% select(PA.NUS.PRVT.PP))
PPP_BRA <- as.numeric(PPP_cty %>% filter(country=="Brazil") %>% select(PA.NUS.PRVT.PP))
PPP_ZAF <- as.numeric(PPP_cty %>% filter(country=="South Africa") %>% select(PA.NUS.PRVT.PP))
# Inflation
# Deflate currency in 2010 to 2007 (EXIO)
CPI <- WDI(country = c("IN", "BR", "FR", "ZA"), indicator = "FP.CPI.TOTL", start = 2007, end = 2015, extra = FALSE, cache = NULL)
CPI_ratio_IND <- as.numeric(CPI %>% filter(year==CES.year & iso2c=='IN') %>% select(FP.CPI.TOTL) / CPI %>% filter(year==IO.year & iso2c=='IN') %>% select(FP.CPI.TOTL))
CPI_ratio_BRA <- as.numeric(CPI %>% filter(year==CES.year & iso2c=='BR') %>% select(FP.CPI.TOTL) / CPI %>% filter(year==IO.year & iso2c=='BR') %>% select(FP.CPI.TOTL))
CPI_ratio_ZAF <- as.numeric(CPI %>% filter(year==CES.year & iso2c=='ZA') %>% select(FP.CPI.TOTL) / CPI %>% filter(year==IO.year & iso2c=='ZA') %>% select(FP.CPI.TOTL))
# Exchange rate (MER) [LCU/$]
EXR_EUR <- WDI(country = "XC", indicator = "PA.NUS.FCRF", start = IO.year, end = IO.year, extra = FALSE, cache = NULL)
EXR_EUR <- EXR_EUR %>% rename(r=PA.NUS.FCRF)
EXR_cty <- WDI(country = c("IN", "BR", "ZA"), indicator = "PA.NUS.FCRF", start = IO.year, end = IO.year, extra = FALSE, cache = NULL)
EXR_IND <- as.numeric(EXR_cty %>% filter(country=="India") %>% select(PA.NUS.FCRF))
EXR_BRA <- as.numeric(EXR_cty %>% filter(country=="Brazil") %>% select(PA.NUS.FCRF))
EXR_ZAF <- as.numeric(EXR_cty %>% filter(country=="South Africa") %>% select(PA.NUS.FCRF))
# HH Consumption in India 2007 [US$]
HH_CON <- WDI(country = c("IN", "BR", "ZA"),
indicator = c(#"NE.CON.PETC.CD",
"NE.CON.PRVT.CD",
# "NE.CON.PETC.CN",
"NE.CON.PRVT.KD"),
start = 2004, end = 2011, extra = FALSE, cache = NULL)
BRA_con_grwth <- as.numeric(HH_CON %>% filter(year==2008 & iso2c=='BR') %>% select(NE.CON.PRVT.KD) /
HH_CON %>% filter(year==IO.year & iso2c=='BR') %>% select(NE.CON.PRVT.KD))
IND_con_grwth <- as.numeric(HH_CON %>% filter(year==2011 & iso2c=='IN') %>% select(NE.CON.PRVT.KD) /
HH_CON %>% filter(year==IO.year & iso2c=='IN') %>% select(NE.CON.PRVT.KD))
ZAF_con_grwth <- as.numeric(HH_CON %>% filter(year==2010 & iso2c=='ZA') %>% select(NE.CON.PRVT.KD) /
HH_CON %>% filter(year==IO.year & iso2c=='ZA') %>% select(NE.CON.PRVT.KD))
# Imports/Exports of goods and services (% of GDP)
WDI(country = c("IN", "BR"), indicator = c("NE.IMP.GNFS.ZS", "NE.EXP.GNFS.ZS"), start = 2007, end = 2007, extra = FALSE, cache = NULL)
Popul <- WDI(country = c("IN", "BR", "FR", "ZA"), indicator = "SP.POP.TOTL", start = 2007, end = 2015, extra = FALSE, cache = NULL)
BRA_pop_io.yr <- Popul %>% rename(pop=SP.POP.TOTL) %>% filter(iso2c=="BR" & year==IO.year) %>% select(pop) %>% as.numeric()#1.9e8
IND_pop_io.yr <- Popul %>% rename(pop=SP.POP.TOTL) %>% filter(iso2c=="IN" & year==IO.year) %>% select(pop) %>% as.numeric()#1.159e9
ZAF_pop_io.yr <- Popul %>% rename(pop=SP.POP.TOTL) %>% filter(iso2c=="ZA" & year==IO.year) %>% select(pop) %>% as.numeric()#1.159e9
##############################################
###        Read in EXIO matrices           ###
##############################################
# Takes long time to run.
# Some .Rda files are already created to save time.
# source("EXIO_init.R")
# EXIO_init_load.R derives energy intensity matrices.
# But since EXIO3, these matrices are read in 'import_EXIO_FE_extension.R'
# Now these intensities are based on 2008 IEA balance and fed into dfei.exio and tfei.exio.
# Using 2008 instead of 2007 because the Indian final electricity consumption breakdown into industries doesn't exist until 2007.
source("EXIO_init_load.R") # EXIO2 read - Still necessary with EXIO3 for setting indexes, carrier names, etc.
source("DLE_integration_functions.R")
#########################################
### Get EXIO FD vectors for countries ###
#########################################
# Get IND final demand from EXIO [M.EUR to M.USD]
IND_place <- which(exio_ctys=="IN")
IND_idx_fd <- seq(7*(IND_place-1)+1, 7*IND_place)   # 7 final demand columns per country
IND_idx_ex <- seq(200*(IND_place-1)+1, 200*IND_place)   # 200 EXIO comodities
IND_idx_ex.i <- seq(163*(IND_place-1)+1, 163*IND_place)   # 163 EXIO industries
IND_fd_ex <- matrix(final_demand[,IND_idx_fd[1]], nrow=200) / EXR_EUR$r  # to M.USD (2007 MER)
IND_fd_exio <- rowSums(IND_fd_ex) # Sum all HH FD across countries
IND_fd_exio_imp <- rowSums(IND_fd_ex[,-IND_place]) # Sum all HH FD across countries
# Get BRA final demand from EXIO [M.EUR to M.USD]
BRA_place <- which(exio_ctys=="BR")
BRA_idx_fd <- seq(7*(BRA_place-1)+1, 7*BRA_place)   # 7 final demand columns per country
BRA_idx_ex <- seq(200*(BRA_place-1)+1, 200*BRA_place)   # 7 final demand columns per country
# Issue: This 'final_demand' for BRA gives too small values for electricity expenditure.
# Instead I can use the column from 'BR_output.xls' file.
# BRA_fd_ex <- matrix(final_demand[,BRA_idx_fd[1]], nrow=200)
# BRA_fd_exio <- rowSums(BRA_fd_ex) # Sum all HH FD across countries
# BRA_fd_exio_imp <- rowSums(BRA_fd_ex[,-BRA_place]) # Sum all HH FD across countries
BRA_fd_ex <- read_excel("../Valuation/BR_output.xls", sheet="usebptot", skip=14, col_names=FALSE)
# Issue: Brazil FD has zero education expediture. (reasons unknown)
# Simply replace the zero with the values found on actual BRA IO
BRA_fd_exio <- as.matrix(BRA_fd_ex[1:200,169])
BRA_fd_exio[174] <- 15600  # M Euro
BRA_fd_exio <- BRA_fd_exio / EXR_EUR$r  # to M.USD 2007
# The value 15600 is from H:\MyDocuments\IO work\Bridging\CES-COICOP\BRA IO FD comparison.xlsx
# Get ZAF final demand from EXIO [M.EUR to M.USD]
ZAF_place <- which(exio_ctys=="ZA")
ZAF_idx_fd <- seq(7*(ZAF_place-1)+1, 7*ZAF_place)   # 7 final demand columns per country
ZAF_idx_ex <- seq(200*(ZAF_place-1)+1, 200*ZAF_place)   # 200 EXIO comodities
ZAF_idx_ex.i <- seq(163*(ZAF_place-1)+1, 163*ZAF_place)   # 163 EXIO industries
ZAF_fd_ex <- matrix(final_demand[,ZAF_idx_fd[1]], nrow=200) / EXR_EUR$r  # to M.USD (2007 MER)
ZAF_fd_exio <- rowSums(ZAF_fd_ex) # Sum all HH FD across countries
#########################################
### Read in COICOP-EXIO Qual mapping  ### (replaced by ICP-EXIO below)
#########################################
# # Issue: This is to be replaced by 'bridge_ICP_EXIO_q' (currently in Map_CES_COICOP.R).
# #       But bridge_COICOP_EXIO_q is used as a base for contructing bridge_ICP_EXIO_q.
# #       I will move the scripts here (or call from here) once it is being used
# n_sector_coicop <- 109
#
# # Mapping <- system.file("COICOP3_EXIO_bridge.xlsx", package = "XLConnect")
# wb <- XLConnect::loadWorkbook("../Bridging/CES-COICOP/COICOIP_EXIO_Qual_UN_Edited.xlsx")
#
# # Qualitative mapping (0 or 1)
# bridge_COICOP_EXIO_q <- XLConnect::readWorksheet(wb, sheet="COICOIP_EXIO_Qual_UN", header=FALSE,
#                                                  startRow=2, endRow=1+n_sector_coicop, startCol=1, endCol= 201, forceConversion=T)
#
# # Final COICOP classification with 109 headings
# COICOP_catnames2 <- XLConnect::readWorksheet(wb, sheet="COICOIP_EXIO_Qual_UN", header=FALSE, startRow=2, endRow=1+n_sector_coicop, startCol=1, endCol=1)
# EX_catnames <- XLConnect::readWorksheet(wb, sheet="COICOIP_EXIO_Qual_UN", header=FALSE, startRow=1, endRow=1, startCol=2)
#
# # Issue: This qual mapping may change depending on countries, which we need to tackle then.
##############################################
###     Read in ICP-EXIO Qual mapping      ###
##############################################
# This is already excuted and saved in a file.
# Don't need to run everytime.
# source("Generate_base_ICP-EXIO_mapping.R")
n_sector_icp <- 151  # Num of ICP sectors
# This matrix is modified externally manually based on the resulting csv from running Generate_base_ICP-EXIO_mapping.R
# to fine-allocate mostly for food-subsectors.
# The result is in H:\MyDocuments\IO work\Bridging\CES-COICOP\ICP_EXIO_Qual_Edited.xlsx
# Manually changed cells are colored in green in the xlsx file.
# Two types of manual changes
#   1. ICP item disaggregation info further details (meat -> poultry)
#   2. Some positive EXIO FD values do not match to any ICP sectors. (e.g. stone from EXIO mapped to household maintenance in ICP)
#     => can be checked by cbind(names(qual_map)[colConst_init!=0 & colSums(qual_map_init)==0], colConst_init[colConst_init!=0 & colSums(qual_map_init)==0])
wb <- XLConnect::loadWorkbook("../Bridging/CES-COICOP/ICP_EXIO_Qual_UN_Edited.xlsx")
bridge_ICP_EXIO_q  <- XLConnect::readWorksheet(wb, "ICP_EXIO_Qual_UN2", header=TRUE,
forceConversion=T, endCol=201)
ICP_catnames <- bridge_ICP_EXIO_q[,1]
EX_catnames <- names(bridge_ICP_EXIO_q)[-1]
#####################################################
###     Treating CES fuel sectors differently     ###
#####################################################
wb <- XLConnect::loadWorkbook("../Bridging/CES-COICOP/CES_fuel_EXIO.xlsx")
bridge_fuel_EXIO_q  <- XLConnect::readWorksheet(wb, "Sheet1", header=TRUE, forceConversion=T,
startRow=2, startCol=3, endCol=202)
DLE_fuel_sector_Q  <- XLConnect::readWorksheet(wb, "Sheet2", header=TRUE, forceConversion=T,
startRow=2, startCol=3)
DLE_fuelnames_std  <- XLConnect::readWorksheet(wb, "Sheet1", header=TRUE, forceConversion=T,
startRow=2, startCol=2, endCol=2)
DLE_fuel_sector_Q[is.na(DLE_fuel_sector_Q)] <- 0
bridge_fuel_EXIO_q[is.na(bridge_fuel_EXIO_q)] <- 0
names(bridge_fuel_EXIO_q) <- EX_catnames
row.names(bridge_fuel_EXIO_q) <- DLE_fuelnames_std[,1]
names(DLE_fuelnames_std) <- "item"
n_sector_icp_fuel <- n_sector_icp + dim(DLE_fuelnames_std)[1]
############################################################
### Read final demand vector from each country's CES DB  ###
############################################################
source("P:/ene.general/DecentLivingEnergy/Surveys/Generic function to access database.R")
source("Read_final_demand_from_DB.R")
source("Read_direct_energy_from_DB.R")
# Read total FD for all population
# dim: n_CES_sector x 2 (or 11 for deciles)
# Comprehensive fuel sectors (union of all DBs)
DLE_fuel_types <- ConstructyFuelTypeSet() %>% arrange(fuel)
# Reading and constructing matrices
# source("Read_DLE_DB.R")
# IND
load(file=paste0(getwd(), "/Saved tables/IND_FD.Rda"))
load(file=paste0(getwd(), "/Saved tables/IND_HH.Rda"))
load(file=paste0(getwd(), "/Saved tables/IND_AllHHConsump.Rda"))
load(file=paste0(getwd(), "/Saved tables/IND1_FUEL_Alldata.Rda")) # IND_FUEL_Alldata
load(file=paste0(getwd(), "/Saved tables/IND_FD_harmonized.Rda")) # IND_FD_ICP_AllHH
# ZAF
load(file=paste0(getwd(), "/Saved tables/ZAF_FD.Rda"))
load(file=paste0(getwd(), "/Saved tables/ZAF_HH.Rda"))
load(file=paste0(getwd(), "/Saved tables/ZAF_AllHHConsump.Rda"))
#####################################################
### Read in (CES-Pseudo COICOP) mappings from WB  ###
#####################################################
### Read in ICP heading number following NTNU 109 mapping (not 100%, some ICP headings are aggregated) ###
Mapping <- system.file("ICP_SEQ.xlsx", package = "XLConnect")
wb <- XLConnect::loadWorkbook("../Bridging/CES-COICOP/Worldbank/ICP_SEQ.xls")
# I added 'Sheet2' and fixed some mis-categorizations for my needs.
icp_seq <- XLConnect::readWorksheet(wb, sheet="Sheet2", header=TRUE, startRow=2, startCol=1, endCol=1, forceConversion=T)
icp_cat <- XLConnect::readWorksheet(wb, sheet="Sheet2", header=FALSE, startRow=3, startCol=3, endCol=4, forceConversion=T)
NTNU <- XLConnect::readWorksheet(wb, sheet="Sheet2", header=TRUE, startRow=2, startCol=7, endCol=8, forceConversion=T)
icp_ntnu <-cbind(icp_seq, icp_cat, NTNU)
names(icp_ntnu)[2:3] <- c("COICOP1","COICOP2")
names(icp_ntnu)[5] <- "ICP_Heading"
source("rIPFP - Process_WB.R")  # Read in the function 'processWBscript' and resulting mtxs for 4 countries
# Issue: I still need to match with our CES DB and final NTNU 109 classification
#        How to combine fuel consumption and other (food etc)
#       -> We decided to follow ICP headings from the WB and bridge this ICP classification to EXIO.
##############################################
###       Generate CES-ICP mapping         ###
##############################################
# Read in CES code tables, fix some mis-mappings from WB, and create CES_ICP_IDN, CES_ICP_IND, etc.
# Then I can do
# IND_FD_ICP <- t(CES_ICP_IND) %*% as.matrix(IND_FD_code[,2])
# to get FD in ICP classification.
source("rIPFP - Map_CES_COICOP.R")
source('H:/MyDocuments/IO work/DLE_scripts/.Rprofile', echo=TRUE)
source("rIPFP - Map_CES_COICOP.R")
n_CES_fuel <- dim(DLE_fuel_sector_Q)[2]
################
### 1. India ###
################
################
### 1.1 IND1 ###
################
# Convert to IND final demand matrix in ICP classification
#############################
### 1.1.1. IND1 by decile ###
#############################
# Remove tax observations from DB
IND_FD_code <- IND_FD[-grep("taxes", IND_FD$item, ignore.case = TRUE), ]
# Merge sector code info
IND_FD_code <- merge(IND_FD_code[1:(dim(IND_FD_code)[1]-n_CES_fuel),], IND_map %>% select(CODE, item=ITEM_DLE),
by="item", all.x = TRUE) %>% arrange(CODE) %>%
rbind(IND_FD[-(1:(dim(IND_FD)[1]-n_CES_fuel)),]%>% mutate(CODE=999))    # Fuels are temprarily assigned to 999. (not used)
# Replace NAs with zeros
IND_FD_code[is.na(IND_FD_code)] <- 0
#################################
### 1.1.2. IND1 by household  ###
#################################
# Read in original IND_FD_ALL
load(file="./Saved tables/IND_AllHHConsump.Rda")
IND_FD_ALL <- IND_FD_ALL[-grep("taxes", IND_FD_ALL$item, ignore.case = TRUE), ]
IND_FD_ALL <- merge(IND_FD_ALL[1:(dim(IND_FD_ALL)[1]-n_CES_fuel),], IND_map %>% select(CODE, item=ITEM_DLE),
by="item", all.x = TRUE) %>% arrange(CODE) %>%
rbind(IND_FD_ALL[-(1:(dim(IND_FD_ALL)[1]-n_CES_fuel)),] %>% mutate(CODE=999))
IND_FD_ALL[is.na(IND_FD_ALL)] <- 0
######################################
### Convert CES rows into ICP rows ###
######################################
# Need to separatly handle the fuel rows  (in USD PPP 2010)
# Fianlly get 164 harmonized ICP rows for all
IND_FD_ICP <- t(CES_ICP_IND) %*% as.matrix(IND_FD_code[1:(dim(IND_FD_code)[1]-n_CES_fuel),2:12]) %>%
rbind(IND_FD_code[-(1:(dim(IND_FD_code)[1]-n_CES_fuel)),2:12]) # for all deciles and total
IND_FD_ICP <- as.matrix(IND_FD_ICP)
# Total final demand in ICP cat for all HH (not scaled up to Nat Acc level yet) (USD 2010 PPP as in DLE DB)
load(file="./Saved tables/IND_AllHH_w_CODE.Rda")
# IND_FD_ICP_AllHH <- crossprod(CES_ICP_IND, as.matrix(IND_FD_ALL[1:(dim(IND_FD_ALL)[1]-n_CES_fuel),-c(1,2), with=FALSE])) %>%
#   rbind(as.matrix(IND_FD_ALL[-(1:(dim(IND_FD_ALL)[1]-n_CES_fuel)),-c(1,2) , with=FALSE]))
# replace with eigenMapMatMult() later
IND_FD_ICP_AllHH <- eigenMapMatMult(t(CES_ICP_IND), as.matrix(IND_FD_ALL[1:(dim(IND_FD_ALL)[1]-n_CES_fuel), -c("item", "CODE"), with=FALSE])) %>%
rbind(as.matrix(IND_FD_ALL[-(1:(dim(IND_FD_ALL)[1]-n_CES_fuel)), -c("item", "CODE"), with=FALSE]))
# In the end, all we need is this ICP matrices
rm(IND_FD, IND_FD_code, IND_FD_ALL)
gc()
##########################################
### Adjust FD based on the indicators  ###
##########################################
#### 1.1 India - Real consumption growth
# IND1 is for 2010-2011
# Not used now (10.18.2016)
# IND_FD_code$COICOP1 <- as.numeric(IND_FD_code$COICOP1)
# IND2_FD_code$COICOP1 <- as.numeric(IND2_FD_code$COICOP1)
# a <- aggregate(. ~ COICOP1, data=IND_FD_code[,2:14], sum)
# b <- aggregate(. ~ COICOP1, data=IND2_FD_code[,2:14], sum)
#
# consumption_growth <- (a[,2:12]/b[,2:12])^(1/7) # general consumption growth rate in 7 years by decile
# consumption_growth_DE <- (IND_DE[,2:12]/IND2_DE[,2:12])^(1/7) # direct energy consumption growth rate in 7 years by decile
# consumption_growth_FD_DE <- (IND_FD_DE[,2:12]/IND2_FD_DE[,2:12])^(1/7) # consumption growth rate in 7 years by decile
#### 1.2 India - Inflation & exchange rate
# Deciles
IND_FD_ICP_svy.yr <- IND_FD_ICP * PPP_IND / CPI_ratio_IND / EXR_IND / 1e6 # to M.USD at IO.year (MER)  - consumption quantity at the survey year (IND1:2011)
IND_FD_ICP_io.yr <- IND_FD_ICP_svy.yr / IND_con_grwth # M.USD 2007 (MER)  - consumption quantity at the common IO year (EXIO2:2007)
# IND_FD_ICP_io.yr <- IND_FD_ICP_svy.yr / ((consumption_growth^4)[c(as.numeric(icp_ntnu$COICOP1)[1:151],rep(4,n_CES_fuel)),])
# This scaling by consumption_growth will go obsolete and simply use IND_con_grwth.
# All households
IND_FD_AllHH_svy.yr <- IND_FD_ICP_AllHH * PPP_IND / CPI_ratio_IND / EXR_IND    # From USD 2010 PPP to USD 2007 (MER)
IND_FD_ICP_AllHH <- IND_FD_AllHH_svy.yr / IND_con_grwth   # to USD 2007 (MER)   # An estimate for hh consumption at the common IO year (EXIO2:2007)
#################
### 2. Brazil ###
#################
#### 2.1 Brazil - Inflation & exchange rate
# BRA1 is for 2008-2009
BRA_FD <- data.frame(item=ICP_catnames) %>% left_join(BRA_FD)  # Join to make items consistent with the standardized names and order
BRA_FD[is.na(BRA_FD)] <- 0
BRA_FD_ICP_io.yr <- as.matrix(BRA_FD[,2:12] * PPP_BRA / CPI_ratio_BRA / EXR_BRA / 1e6 / BRA_con_grwth) # to M.USD 2007
# BRA1_FD_ICP_io.yr <- cbind(BRA1_FD[,1], as.matrix(BRA1_FD[,2:12] * PPP_BRA / CPI_ratio_BRA / EXR_BRA / 1e6 / BRA_con_grwth)) # to M.USD 2007
# FD for all households
BRA_FD_ICP_AllHH <- data.frame(item=ICP_catnames) %>% left_join(BRA_FD_ALL)
BRA_FD_ICP_AllHH <- as.matrix(BRA_FD_ICP_AllHH[,-1]) * PPP_BRA / CPI_ratio_BRA / EXR_BRA / BRA_con_grwth # to USD 2007
# BRA_FD_ICP_AllHH[,-1] <- NAer(BRA_FD_ICP_AllHH[,-1]) # Faster than
BRA_FD_ICP_AllHH[is.na(BRA_FD_ICP_AllHH)] <- 0
load(file=paste0(getwd(), "/Saved tables/BRA_FD.Rda"))
load(file=paste0(getwd(), "/Saved tables/BRA_HH.Rda"))
load(file=paste0(getwd(), "/Saved tables/BRA_AllHHConsump.Rda"))
BRA_FD <- data.frame(item=ICP_catnames) %>% left_join(BRA_FD)  # Join to make items consistent with the standardized names and order
BRA_FD[is.na(BRA_FD)] <- 0
BRA_FD_ICP_io.yr <- as.matrix(BRA_FD[,2:12] * PPP_BRA / CPI_ratio_BRA / EXR_BRA / 1e6 / BRA_con_grwth) # to M.USD 2007
# BRA1_FD_ICP_io.yr <- cbind(BRA1_FD[,1], as.matrix(BRA1_FD[,2:12] * PPP_BRA / CPI_ratio_BRA / EXR_BRA / 1e6 / BRA_con_grwth)) # to M.USD 2007
# FD for all households
BRA_FD_ICP_AllHH <- data.frame(item=ICP_catnames) %>% left_join(BRA_FD_ALL)
BRA_FD_ICP_AllHH <- as.matrix(BRA_FD_ICP_AllHH[,-1]) * PPP_BRA / CPI_ratio_BRA / EXR_BRA / BRA_con_grwth # to USD 2007
# BRA_FD_ICP_AllHH[,-1] <- NAer(BRA_FD_ICP_AllHH[,-1]) # Faster than
BRA_FD_ICP_AllHH[is.na(BRA_FD_ICP_AllHH)] <- 0
save(IND_FD_ICP_io.yr, file="./Saved tables/IND_FD_ICP_io.yr.Rda")
save(BRA_FD_ICP_io.yr, file="./Saved tables/BRA_FD_ICP_io.yr.Rda")
# Set Scalers
scaler_IND <- sum(IND_FD_ICP_io.yr[,1]) / sum(get_purch_price(IND_fd_exio, "IN"))
# scaler2_IND <- sum(IND2_FD_ICP_io.yr[,1]) / sum(get_purch_price(IND2_fd_exio, "IN"))
scaler_IND2 <- scaler_IND
init_FD_IND <- IND_FD_ICP_io.yr[,1] / scaler_IND
scaler_BRA <- sum(BRA_FD_ICP_io.yr[,1]) / sum(get_purch_price(BRA_fd_exio, "BR"))
init_FD_BRA <- BRA_FD_ICP_io.yr[,1] / scaler_BRA
source('H:/MyDocuments/IO work/DLE_scripts/rIPFP - Valuation.R', echo=TRUE)
# Set Scalers
scaler_IND <- sum(IND_FD_ICP_io.yr[,1]) / sum(get_purch_price(IND_fd_exio, "IN"))
# scaler2_IND <- sum(IND2_FD_ICP_io.yr[,1]) / sum(get_purch_price(IND2_fd_exio, "IN"))
scaler_IND2 <- scaler_IND
init_FD_IND <- IND_FD_ICP_io.yr[,1] / scaler_IND
scaler_BRA <- sum(BRA_FD_ICP_io.yr[,1]) / sum(get_purch_price(BRA_fd_exio, "BR"))
init_FD_BRA <- BRA_FD_ICP_io.yr[,1] / scaler_BRA
# Remove tax observations from DB
ZAF_FD_code <- ZAF_FD[-grep("taxes|VAT ", ZAF_FD$item, ignore.case = TRUE), ]
# Merge sector code info
# ZAF_FD_code <- merge(ZAF_FD_code[1:(dim(ZAF_FD_code)[1]-n_CES_fuel),], ZAF_map %>% select(CODE, item=ITEM_DLE),
#                      by="item", all.x = TRUE) %>%
#   arrange(CODE) %>%
#   rbind(ZAF_FD[-(1:(dim(ZAF_FD)[1]-n_CES_fuel)),] %>% mutate(CODE=999))    # Fuels are temprarily assigned to 999. (not used)
ZAF_FD_code <- ZAF_FD_code[1:(dim(ZAF_FD_code)[1]-n_CES_fuel),] %>% left_join(ZAF_map %>% select(CODE, item=ITEM_DLE), by="item") %>%
arrange(CODE) %>%
rbind(ZAF_FD[-(1:(dim(ZAF_FD)[1]-n_CES_fuel)),] %>% mutate(CODE=999))    # Fuels are temprarily assigned to 999. (not used)
# Replace NAs with zeros
ZAF_FD_code[is.na(ZAF_FD_code)] <- 0
# Read in original IND_FD_ALL
load(file="./Saved tables/ZAF_AllHHConsump.Rda")
ZAF_FD_ALL <- ZAF_FD_ALL[-grep("taxes|VAT ", ZAF_FD_ALL$item, ignore.case = TRUE), ]
ZAF_FD_ALL <- merge(ZAF_FD_ALL[1:(dim(ZAF_FD_ALL)[1]-n_CES_fuel),], ZAF_map %>% select(CODE, item=ITEM_DLE),
by="item", all.x = TRUE) %>%
arrange(CODE) %>% select(item, CODE, everything()) %>%
rbind(ZAF_FD_ALL[-(1:(dim(ZAF_FD_ALL)[1]-n_CES_fuel)),] %>% mutate(CODE=999))
ZAF_FD_ALL[is.na(ZAF_FD_ALL)] <- 0
D PPP 2010)
# Fianlly get 164 harmonized ICP rows for all
ZAF_FD_ICP <- t(CES_ICP_ZAF) %*% as.matrix(ZAF_FD_code[1:(dim(ZAF_FD_code)[1]-n_CES_fuel),2:12]) %>%
rbind(ZAF_FD_code[-(1:(dim(ZAF_FD_code)[1]-n_CES_fuel)),2:12]) # for all deciles and total
ZAF_FD_ICP <- as.matrix(ZAF_FD_ICP)
# Total final demand in ICP cat for all HH (not scaled up to Nat Acc level yet) (USD 2010 PPP as in DLE DB)
# load(file="./Saved tables/ZAF_AllHH_w_CODE.Rda")
ZAF_FD_ICP_AllHH <- eigenMapMatMult(t(CES_ICP_ZAF), as.matrix(ZAF_FD_ALL[1:(dim(ZAF_FD_ALL)[1]-n_CES_fuel), -c("item", "CODE"), with=FALSE])) %>%
rbind(as.matrix(ZAF_FD_ALL[-(1:(dim(ZAF_FD_ALL)[1]-n_CES_fuel)), -c("item", "CODE"), with=FALSE]))
rm(ZAF_FD, ZAF_FD_code, ZAF_FD_ALL)
gc()
# Deciles
ZAF_FD_ICP_svy.yr <- ZAF_FD_ICP * PPP_ZAF / CPI_ratio_ZAF / EXR_ZAF / 1e6 # to M.USD 2007 (MER)
ZAF_FD_ICP_io.yr <- ZAF_FD_ICP_svy.yr / ZAF_con_grwth
# ZAF_FD_ICP_io.yr <- ZAF_FD_ICP_svy.yr / ((consumption_growth^4)[c(as.numeric(icp_ntnu$COICOP1)[1:151],rep(4,n_CES_fuel)),])
# This scaling by consumption_growth will go obsolete and simply use ZAF_con_grwth.
# All households
ZAF_FD_AllHH_svy.yr <- ZAF_FD_ICP_AllHH * PPP_ZAF / CPI_ratio_ZAF / EXR_ZAF    # From USD 2010 PPP to USD 2007 (MER)
ZAF_FD_ICP_AllHH <- ZAF_FD_AllHH_svy.yr / ZAF_con_grwth   # to USD 2007 (MER)   # An estimate for hh consumption in 2007
save(ZAF_FD_ICP_io.yr, file="./Saved tables/ZAF_FD_ICP_io.yr.Rda")
source("Load_init_data.R") # Need 'get_purch_price'
source("rIPFP - Bridging_uncertainty.R")
source("rIPFP - Functions_for_intensity_analysis.R")
source("rIPFP - Bridge_RAS.R")
source("Import_EXIO3.R")  # Incorporate EXIO3
warnings()
source('H:/MyDocuments/IO work/DLE_scripts/Import_EXIO3.R', echo=TRUE)
ICP_food_idx <- 1:45
ICP_hhold_idx <- c(56:84, 138:151)  # Household goods/services
ICP_svc_idx <- 85:137   # Health, Transport, Communication, Recreation
ICP_fuel_idx <-152:164
ICP_all_idx <- 1:164
# Returns time-series (now, 2030, 2050)
Year.end <- 2050
Year.base <- 2015
Year.obs <- c(Year.base, seq(2020, Year.end, 10))
#DLE.sectors <- c("Food", "Clothing", "Health.Edu", "Housing.BL", "Housing.OP", "Water.Sani", "Road", "Appliance", "Transport")
DLE.countries <- c('IND', 'BRA', 'ZAF')
# This is based on EXIO3 Final Energy extension.
n_draw <- 100
# list[BRA.tpei.use.icp, BRA.alloc.use, NC_BRA_val_BRA.use, BRA_FD_adj_val_BRA.use] <-
#   DeriveIntensities('BRA', 'primary', pri.intensity.mat=tpei.USE)
# list[IND_intensity.use, IND_alloc.use, NC_IND.use, IND_FD_adj.use] <-
#   DeriveIntensities('IND', 'primary', pri.intensity.mat=tpei.USE)
# list[ZAF_intensity.use, ZAF_alloc.use, NC_ZAF.use, ZAF_FD_adj.use] <-
#   DeriveIntensities('ZAF', 'primary', pri.intensity.mat=tpei.USE)
#
# list[BRA.tpei.nature.icp, BRA.alloc.nature, NC_BRA_val_BRA.nature, BRA_FD_adj_val_BRA.nature] <-
#   DeriveIntensities('BRA', 'primary', pri.intensity.mat=tpei.nature)
# list[IND_intensity.nature, IND_alloc.nature, NC_IND.nature, IND_FD_adj.nature] <-
#   DeriveIntensities('IND', 'primary', pri.intensity.mat=tpei.nature)
# list[ZAF_intensity.nature, ZAF_alloc.nature, NC_ZAF.nature, ZAF_FD_adj.nature] <-
#   DeriveIntensities('ZAF', 'primary', pri.intensity.mat=tpei.nature)
list[BRA.tnei.icp, BRA.alloc.tnei, NC_BRA_val_BRA.tnei, BRA_FD_adj_val_BRA.tnei] <-
DeriveIntensities('BRA', 'primary', pri.intensity.mat=tnei.exio)
list[BRA.tnei.icp, BRA.alloc.tnei, NC_BRA_val_BRA.tnei, BRA_FD_adj_val_BRA.tnei] <-
DeriveIntensities('BRA', 'primary', pri.intensity.mat=tnei.exio)
list[IND.tnei.icp, IND_alloc.tnei, NC_IND.tnei, IND_FD_adj.tnei] <-
DeriveIntensities('IND', 'primary', pri.intensity.mat=tnei.exio)
colMeans(BRA.tnei.icp)
ICP_catnames
list[ZAF.tnei.icp, ZAF_alloc.tnei, NC_ZAF.tnei, ZAF_FD_adj.tnei] <-
DeriveIntensities('ZAF', 'primary', pri.intensity.mat=tnei.exio)
list[BRA.tfei.icp, BRA.alloc, NC_BRA_val_BRA, BRA_FD_adj_val_BRA] <- DeriveIntensities('BRA', 'final', final.intensity.mat=tfei.exio)
list[IND.tfei.icp, IND_alloc, NC_IND, IND_FD_adj] <- DeriveIntensities('IND', 'final', final.intensity.mat=tfei.exio)
list[ZAF.tfei.icp, ZAF_alloc, NC_ZAF, ZAF_FD_adj] <- DeriveIntensities('ZAF', 'final', final.intensity.mat=tfei.exio)
list[BRA.tfei.icp.elec, BRA.alloc, NC_BRA_val_BRA, BRA_FD_adj_val_BRA] <- DeriveIntensities('BRA', 'final', final.intensity.mat=tfei.elec)
list[IND.tfei.icp.elec, IND_alloc, NC_IND, IND_FD_adj] <- DeriveIntensities('IND', 'final', final.intensity.mat=tfei.elec)
list[ZAF.tfei.icp.elec, ZAF_alloc, NC_ZAF, ZAF_FD_adj] <- DeriveIntensities('ZAF', 'final', final.intensity.mat=tfei.elec)
list[BRA.tfei.icp.non.elec, BRA.alloc, NC_BRA_val_BRA, BRA_FD_adj_val_BRA] <- DeriveIntensities('BRA', 'final', final.intensity.mat=tfei.non.elec)
list[IND.tfei.icp.non.elec, IND_alloc, NC_IND, IND_FD_adj] <- DeriveIntensities('IND', 'final', final.intensity.mat=tfei.non.elec)
list[ZAF.tfei.icp.non.elec, ZAF_alloc, NC_ZAF, ZAF_FD_adj] <- DeriveIntensities('ZAF', 'final', final.intensity.mat=tfei.non.elec)
save(BRA.tfei.icp, file="./Saved tables/BRA.tfei.icp.Rda")
save(IND.tfei.icp, file="./Saved tables/IND.tfei.icp.Rda")
save(ZAF.tfei.icp, file="./Saved tables/ZAF.tfei.icp.Rda")
save(BRA.tnei.icp, file="./Saved tables/BRA.tnei.icp.Rda")
save(IND.tnei.icp, file="./Saved tables/IND.tnei.icp.Rda")
save(ZAF.tnei.icp, file="./Saved tables/ZAF.tnei.icp.Rda")
save(BRA.tfei.icp.elec, file="./Saved tables/BRA.tfei.icp.elec.Rda")
save(IND.tfei.icp.elec, file="./Saved tables/IND.tfei.icp.elec.Rda")
save(ZAF.tfei.icp.elec, file="./Saved tables/ZAF.tfei.icp.elec.Rda")
save(BRA.tfei.icp.non.elec, file="./Saved tables/BRA.tfei.icp.non.elec.Rda")
save(IND.tfei.icp.non.elec, file="./Saved tables/IND.tfei.icp.non.elec.Rda")
save(ZAF.tfei.icp.non.elec, file="./Saved tables/ZAF.tfei.icp.non.elec.Rda")
types <- c('.tfei.icp', '.tnei.icp', '.tfei.icp.elec', '.tfei.icp.non.elec')
types.long <- c('Embodied final total', 'Embodied primary total', 'Embodied final electric', 'Embodied final non-electric')
ctys <- c('IND', 'BRA', 'ZAF')
int.db.mat <- list()
for (i in types) {
cty.int <- paste0(ctys, i)
# int.mat[[j]] <- eval(parse(text=cty.int))
# }
int.mat = list(eval(parse(text=cty.int[1])), eval(parse(text=cty.int[2])), eval(parse(text=cty.int[3])))
names(int.mat) <- ctys
int.sum <- list()
for (j in 1:length(ctys)) {
colnames(int.mat[[j]]) <- ICP_catnames
int_summary <- stat.desc(int.mat[[j]])
int_summary <- t(int_summary[c(9,13),]) %>% round(digits=2)  # Just mean and sd
int.sum[[j]] <- data.frame(COUNTRY=ctys[j], YR=IO.year, ICP_CODE=1:164, TYPE=types.long[which(types==i)], int_summary)
}
int.db.mat[[which(types==i)]] <- do.call("rbind", int.sum)
}
int.db <- do.call("rbind", int.db.mat)
int.db
int.db %>% filter(COUNTRY=="BRA" & TYPE=="Embodied final total")
int.db %>% filter(COUNTRY=="BRA" & TYPE=="Embodied primary total")
view(int.db %>% filter(COUNTRY=="BRA" & TYPE=="Embodied primary total"))
writeDF2Oracle(int.db, "ENE_INT_EXIO3", primary.keys=c('COUNTRY', 'YR', 'ICP_CODE', 'TYPE'))
source("P:/ene.general/DecentLivingEnergy/Surveys/Scripts/00 Load required packages.R")
source("P:/ene.general/DecentLivingEnergy/Surveys/Scripts/01 Load generic helper functions.R")
source("P:/ene.general/DecentLivingEnergy/Surveys/Generic function to access database.R")
source("P:/ene.general/DecentLivingEnergy/Surveys/Scripts/Functions for building Oracle DB tables.R")
writeDF2Oracle(int.db, "ENE_INT_EXIO3", primary.keys=c('COUNTRY', 'YR', 'ICP_CODE', 'TYPE'))
### Additional outputs for FE meeting w/ Volker & Keywan 27/4/2018
sects <- 1:200
# sects <- c(Beef=43, Pork=44, Poultry=45) # Cement, Steel, Aluminum #
# sects <- c(Cement=101, Steel=104, Alu=108) # Cement, Steel, Aluminum
names(sects) <- EX_catnames[sects]
elec.idx <- grep("Electricity ", carrier.name.fin)
cty.idx.ex <- IND_idx_ex
NENE <- c(colSums(tfei.sub[[1]][elec.idx, cty.idx.ex[sects]]),colSums(tfei.sub[[1]][-elec.idx, cty.idx.ex[sects]]))
NTRA <- c(colSums(tfei.sub[[2]][elec.idx, cty.idx.ex[sects]]),colSums(tfei.sub[[2]][-elec.idx, cty.idx.ex[sects]]))
TAVI <- c(colSums(tfei.sub[[3]][elec.idx, cty.idx.ex[sects]]),colSums(tfei.sub[[3]][-elec.idx, cty.idx.ex[sects]]))
TMAR <- c(colSums(tfei.sub[[4]][elec.idx, cty.idx.ex[sects]]),colSums(tfei.sub[[4]][-elec.idx, cty.idx.ex[sects]]))
TOTH <- c(colSums(tfei.sub[[5]][elec.idx, cty.idx.ex[sects]]),colSums(tfei.sub[[5]][-elec.idx, cty.idx.ex[sects]]))
TRAI <- c(colSums(tfei.sub[[6]][elec.idx, cty.idx.ex[sects]]),colSums(tfei.sub[[6]][-elec.idx, cty.idx.ex[sects]]))
TROA <- c(colSums(tfei.sub[[7]][elec.idx, cty.idx.ex[sects]]),colSums(tfei.sub[[7]][-elec.idx, cty.idx.ex[sects]]))
TOTL.F <- c(colSums(tfei.exio[elec.idx,cty.idx.ex[sects]]),colSums(tfei.exio[-elec.idx,cty.idx.ex[sects]]))
TOTL.P.prod <- c(colSums(tpei.nature[,cty.idx.ex[sects]]))
TOTL.P.use <- c(colSums(tpei.USE[,cty.idx.ex[sects]]))
TOTL.P.net <- c(colSums(tnei.exio[,cty.idx.ex[sects]]))
sum.out <- data.frame(NENE, NTRA, TAVI, TMAR, TOTH, TRAI, TROA, TOTL.F, TOTL.P.prod, TOTL.P.use, TOTL.P.net)
row.names(sum.out) <- c(paste0(names(sects), ".elec"), paste0(names(sects), ".non-elec"))
write.table(sum.out, "clipboard-16384", sep="\t", row.names = TRUE, col.names = TRUE)
# a <- sum.out[1:3,] + sum.out[4:6,]
a <- sum.out[1:length(sects),] + sum.out[(length(sects)+1):(2*length(sects)),]
a <- a %>% mutate(EXIO = EX_catnames[sects]) %>% select(EXIO, everything())
write.table(a, "clipboard-16384", sep="\t", row.names = TRUE, col.names = TRUE)
