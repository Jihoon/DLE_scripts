# EXIO: XXXX EUR MER
CES.year <- 2010 # DLE DB
IO.year <- 2010 # Pick one closest to the survey year.  2007 for EXIO2
# DLE DB in PPP 2010$ (PPP in terms of private consumption)
# EXIO in MER 2007
# Need this PPP rate to go back to local currency in 2010
# [LCU/$]
PPP_cty = WDI(country = c("IN", "BR", "ZA"), indicator = c("PA.NUS.PPP", "PA.NUS.PRVT.PP"), start = CES.year, end = CES.year, extra = FALSE, cache = NULL)
PPP_IND <- as.numeric(PPP_cty %>% filter(country=="India") %>% select(PA.NUS.PRVT.PP))
PPP_BRA <- as.numeric(PPP_cty %>% filter(country=="Brazil") %>% select(PA.NUS.PRVT.PP))
PPP_ZAF <- as.numeric(PPP_cty %>% filter(country=="South Africa") %>% select(PA.NUS.PRVT.PP))
# Inflation
# Deflate currency in 2010 to 2007 (EXIO)
CPI <- WDI(country = c("IN", "BR", "FR", "ZA"), indicator = "FP.CPI.TOTL", start = 2007, end = 2015, extra = FALSE, cache = NULL)
CPI_ratio_IND <- as.numeric(CPI %>% filter(year==CES.year & iso2c=='IN') %>% select(FP.CPI.TOTL) / CPI %>% filter(year==IO.year & iso2c=='IN') %>% select(FP.CPI.TOTL))
CPI_ratio_BRA <- as.numeric(CPI %>% filter(year==CES.year & iso2c=='BR') %>% select(FP.CPI.TOTL) / CPI %>% filter(year==IO.year & iso2c=='BR') %>% select(FP.CPI.TOTL))
CPI_ratio_ZAF <- as.numeric(CPI %>% filter(year==CES.year & iso2c=='ZA') %>% select(FP.CPI.TOTL) / CPI %>% filter(year==IO.year & iso2c=='ZA') %>% select(FP.CPI.TOTL))
# Exchange rate (MER) [LCU/$]
EXR_EUR <- WDI(country = "XC", indicator = "PA.NUS.FCRF", start = IO.year, end = IO.year, extra = FALSE, cache = NULL)
EXR_EUR <- EXR_EUR %>% rename(r=PA.NUS.FCRF)
EXR_cty <- WDI(country = c("IN", "BR", "ZA"), indicator = "PA.NUS.FCRF", start = IO.year, end = IO.year, extra = FALSE, cache = NULL)
EXR_IND <- as.numeric(EXR_cty %>% filter(country=="India") %>% select(PA.NUS.FCRF))
EXR_BRA <- as.numeric(EXR_cty %>% filter(country=="Brazil") %>% select(PA.NUS.FCRF))
EXR_ZAF <- as.numeric(EXR_cty %>% filter(country=="South Africa") %>% select(PA.NUS.FCRF))
# HH Consumption in India 2007 [US$]
HH_CON <- WDI(country = c("IN", "BR", "ZA"),
indicator = c(#"NE.CON.PETC.CD",
"NE.CON.PRVT.CD",
# "NE.CON.PETC.CN",
"NE.CON.PRVT.KD"),
start = 2004, end = 2011, extra = FALSE, cache = NULL)
BRA_con_grwth <- as.numeric(HH_CON %>% filter(year==2008 & iso2c=='BR') %>% select(NE.CON.PRVT.KD) /
HH_CON %>% filter(year==IO.year & iso2c=='BR') %>% select(NE.CON.PRVT.KD))
IND_con_grwth <- as.numeric(HH_CON %>% filter(year==2011 & iso2c=='IN') %>% select(NE.CON.PRVT.KD) /
HH_CON %>% filter(year==IO.year & iso2c=='IN') %>% select(NE.CON.PRVT.KD))
ZAF_con_grwth <- as.numeric(HH_CON %>% filter(year==2010 & iso2c=='ZA') %>% select(NE.CON.PRVT.KD) /
HH_CON %>% filter(year==IO.year & iso2c=='ZA') %>% select(NE.CON.PRVT.KD))
# Imports/Exports of goods and services (% of GDP)
WDI(country = c("IN", "BR"), indicator = c("NE.IMP.GNFS.ZS", "NE.EXP.GNFS.ZS"), start = 2007, end = 2007, extra = FALSE, cache = NULL)
Popul <- WDI(country = c("IN", "BR", "FR", "ZA"), indicator = "SP.POP.TOTL", start = 2007, end = 2015, extra = FALSE, cache = NULL)
BRA_pop_io.yr <- Popul %>% rename(pop=SP.POP.TOTL) %>% filter(iso2c=="BR" & year==IO.year) %>% select(pop) %>% as.numeric()#1.9e8
IND_pop_io.yr <- Popul %>% rename(pop=SP.POP.TOTL) %>% filter(iso2c=="IN" & year==IO.year) %>% select(pop) %>% as.numeric()#1.159e9
ZAF_pop_io.yr <- Popul %>% rename(pop=SP.POP.TOTL) %>% filter(iso2c=="ZA" & year==IO.year) %>% select(pop) %>% as.numeric()#1.159e9
##############################################
###        Read in EXIO matrices           ###
##############################################
# Takes long time to run.
# Some .Rda files are already created to save time.
# source("EXIO_init.R")
# EXIO_init_load.R derives energy intensity matrices.
# But since EXIO3, these matrices are read in 'import_EXIO_FE_extension.R'
# Now these intensities are based on 2008 IEA balance and fed into dfei.exio and tfei.exio.
# Using 2008 instead of 2007 because the Indian final electricity consumption breakdown into industries doesn't exist until 2007.
source("EXIO_init_load.R") # EXIO2 read - Still necessary with EXIO3 for setting indexes, carrier names, etc.
source("DLE_integration_functions.R")
#########################################
### Get EXIO FD vectors for countries ###
#########################################
# Get IND final demand from EXIO [M.EUR to M.USD]
IND_place <- which(exio_ctys=="IN")
IND_idx_fd <- seq(7*(IND_place-1)+1, 7*IND_place)   # 7 final demand columns per country
IND_idx_ex <- seq(200*(IND_place-1)+1, 200*IND_place)   # 200 EXIO comodities
IND_idx_ex.i <- seq(163*(IND_place-1)+1, 163*IND_place)   # 163 EXIO industries
IND_fd_ex <- matrix(final_demand[,IND_idx_fd[1]], nrow=200) / EXR_EUR$r  # to M.USD (2007 MER)
IND_fd_exio <- rowSums(IND_fd_ex) # Sum all HH FD across countries
IND_fd_exio_imp <- rowSums(IND_fd_ex[,-IND_place]) # Sum all HH FD across countries
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
scaler_IND <- sum(IND_FD_ICP_io.yr[,1]) / sum(IND_fd_exio_pp)
sum(IND_fd_exio_pp)
sum(IND_fd_exio)
### General prep ###
# Now WDI part is covered in Init.R
# library(WDI)
# PPP <- WDI(country = c("IN", "BR", "ZA"), indicator = c("PA.NUS.PPP"), start = 2008, end = 2011, extra = FALSE, cache = NULL)
# survey year: BRA-2008, IND-2011, ZAF-2010
# I'll use 2010 as the base year for now.
# # DLE DB: 2010 $ PPP
# # EXIO: XXXX EUR MER
# CES.year <- 2010 # DLE DB
# IO.year <- 2010 # Pick one closest to the survey year
#
# PPP_IND <- as.numeric(PPP %>% filter(year==CES.year & iso2c=='IN') %>% select(PA.NUS.PPP))
# PPP_BRA <- as.numeric(PPP %>% filter(year==CES.year & iso2c=='BR') %>% select(PA.NUS.PPP))
# PPP_ZAF <- as.numeric(PPP %>% filter(year==CES.year & iso2c=='ZA') %>% select(PA.NUS.PPP))
#
# # CPI and EXR not needed if both IO and CES are in 2010 term (normally >1)
# CPI_IND <- as.numeric(CPI %>% filter(year==CES.year & iso2c=='IN') %>% select(FP.CPI.TOTL) /
#                         CPI %>% filter(year==IO.year & iso2c=='IN') %>% select(FP.CPI.TOTL))
# CPI_BRA <- as.numeric(CPI %>% filter(year==CES.year & iso2c=='BR') %>% select(FP.CPI.TOTL) /
#                         CPI %>% filter(year==IO.year & iso2c=='BR') %>% select(FP.CPI.TOTL))
# CPI_ZAF <- as.numeric(CPI %>% filter(year==CES.year & iso2c=='ZA') %>% select(FP.CPI.TOTL) /
#                         CPI %>% filter(year==IO.year & iso2c=='ZA') %>% select(FP.CPI.TOTL))
#
# # Exchange rate (MER) [LCU/$]
# EXR_EUR <- WDI(country = "XC", indicator = "PA.NUS.FCRF", start = IO.year, end = IO.year, extra = FALSE, cache = NULL)
# EXR_EUR <- EXR_EUR %>% rename(r=PA.NUS.FCRF)
# EXR_cty <- WDI(country = c("IN", "BR", "ZA"), indicator = "PA.NUS.FCRF", start = IO.year, end = IO.year, extra = FALSE, cache = NULL)
#
# EXR_IND <- as.numeric(EXR_cty %>% filter(country=="India") %>% select(PA.NUS.FCRF))
# EXR_BRA <- as.numeric(EXR_cty %>% filter(country=="Brazil") %>% select(PA.NUS.FCRF))
# EXR_ZAF <- as.numeric(EXR_cty %>% filter(country=="South Africa") %>% select(PA.NUS.FCRF))
#
# #
# HH_CON <- WDI(country = c("IN", "BR", "ZA"),
#               indicator = c(#"NE.CON.PETC.CD",
#                 "NE.CON.PRVT.CD",
#                 # "NE.CON.PETC.CN",
#                 "NE.CON.PRVT.KD"),
#               start = 2004, end = 2011, extra = FALSE, cache = NULL)
# BRA_con_grwth <- as.numeric(HH_CON %>% filter(year==2008 & iso2c=='BR') %>% select(NE.CON.PRVT.KD) / # BRA0/1
#                               HH_CON %>% filter(year==IO.year & iso2c=='BR') %>% select(NE.CON.PRVT.KD))
# IND_con_grwth <- as.numeric(HH_CON %>% filter(year==2011 & iso2c=='IN') %>% select(NE.CON.PRVT.KD) / # IND1
#                               HH_CON %>% filter(year==IO.year & iso2c=='IN') %>% select(NE.CON.PRVT.KD))
# ZAF_con_grwth <- as.numeric(HH_CON %>% filter(year==2010 & iso2c=='ZA') %>% select(NE.CON.PRVT.KD) / # ZAF1
#                               HH_CON %>% filter(year==IO.year & iso2c=='ZA') %>% select(NE.CON.PRVT.KD))
#
# Then we need to overwrite L_inverse, tot_demand, final_demand, and the country list with EXIO3 data.
exio_ctys <- c("AT", "BE", "BG", "CY", "CZ", "DE", "DK", "EE", "ES", "FI",
"FR", "GR",
"HR", # Added new at EXIO3
"HU", "IE", "IT", "LT", "LU", "LV", "MT", "NL",
"PL", "PT", "RO", "SE", "SI", "SK", "GB", "US", "JP", "CN",
"CA", "KR", "BR", "IN", "MX", "RU", "AU", "CH", "TR", "TW",
"NO", "ID", "ZA", "WA", "WL", "WE", "WF", "WM")
num.cty <- length(exio_ctys)
exio.len <- length(exio_ctys)*200
exio.fd.len <- length(exio_ctys)*7
# Get IND final demand from EXIO [M.EUR to M.USD]
IND_place <- which(exio_ctys=="IN")
IND_idx_fd <- seq(7*(IND_place-1)+1, 7*IND_place)   # 7 final demand columns per country
IND_idx_ex <- seq(200*(IND_place-1)+1, 200*IND_place)   # 200 EXIO comodities
# Get BRA final demand from EXIO [M.EUR to M.USD]
BRA_place <- which(exio_ctys=="BR")
BRA_idx_fd <- seq(7*(BRA_place-1)+1, 7*BRA_place)   # 7 final demand columns per country
BRA_idx_ex <- seq(200*(BRA_place-1)+1, 200*BRA_place)   # 7 final demand columns per country
# Get ZAF final demand from EXIO [M.EUR to M.USD]
ZAF_place <- which(exio_ctys=="ZA")
ZAF_idx_fd <- seq(7*(ZAF_place-1)+1, 7*ZAF_place)   # 7 final demand columns per country
ZAF_idx_ex <- seq(200*(ZAF_place-1)+1, 200*ZAF_place)   # 200 EXIO comodities
IO.year
L_inverse <- read.csv(paste0(EXIO3_path, paste0("L_", IO.year, ".csv")), header = FALSE)
IO.year
load(file=paste0("./Saved tables/L_inverse_EXIO3_", IO.year, ".Rda")) # L_inverse
final_demand <- read.csv(paste0(EXIO3_path, paste0("Y_", IO.year, ".csv")), header = FALSE)
tot_output <- read.csv(paste0(EXIO3_path, paste0("x_", IO.year, ".csv")), header = FALSE)
tot_demand <- rowSums(tot_output)
IND_fd_ex <- matrix(final_demand[,IND_idx_fd[1]], nrow=200) / EXR_EUR$r  # to M.USD (2007 MER)
IND_fd_exio <- rowSums(IND_fd_ex) # Sum all HH FD across countries
BRA_fd_ex <- matrix(final_demand[,BRA_idx_fd[1]], nrow=200) / EXR_EUR$r  # to M.USD (2007 MER)
BRA_fd_exio <- rowSums(BRA_fd_ex) # Sum all HH FD across countries
ZAF_fd_ex <- matrix(final_demand[,ZAF_idx_fd[1]], nrow=200) / EXR_EUR$r  # to M.USD (2007 MER)
ZAF_fd_exio <- rowSums(ZAF_fd_ex) # Sum all HH FD across countries
sum(IND_fd_exio)
sum(BRA_fd_exio)
sum(ZAF_fd_exio)
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
sum(IND_fd_exio_pp)
source('H:/MyDocuments/IO work/DLE_scripts/rIPFP - Valuation.R', echo=TRUE)
diag(val_IN)
debugSource('H:/MyDocuments/IO work/DLE_scripts/rIPFP - Valuation.R', echo=TRUE)
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
v_bp[149]
taxR[149]
taxR
v_pp[149]
Dinv <- get_inv_valmtx(D)
v_pp <- t(Dinv) %*% v_bp
v_pp[149]
v_bp[149]
v_pp
1/(1-taxR)
1-taxR
taxR
debugSource('H:/MyDocuments/IO work/DLE_scripts/rIPFP - Valuation.R', echo=TRUE)
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
sum(IND_fd_exio_pp)
sum(IND_fd_exio)
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
taxR
debugSource('H:/MyDocuments/IO work/DLE_scripts/rIPFP - Valuation.R', echo=TRUE)
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
taxR
taxR>0 & taxR<1e-5
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
D
D[,201]
taxR
v_pp
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
IND_fd_exio_pp
debugSource('H:/MyDocuments/IO work/DLE_scripts/rIPFP - Valuation.R', echo=TRUE)
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
1/(1-taxR)
1-taxR
taxR
taxR[149]
(1-taxR)[149]
source('H:/MyDocuments/IO work/DLE_scripts/rIPFP - Valuation.R', echo=TRUE)
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
sum(IND_fd_exio_pp)
debugSource('H:/MyDocuments/IO work/DLE_scripts/rIPFP - Valuation.R', echo=TRUE)
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
tax.div
v_pp
tax.div[149]
tax.div
taxR
1-taxR
v_bp[c(149, 154, 157)]
tax.div
v_pp / tax.div
v_pp
v_pp[c(149, 154, 157)]
Dinv <- get_inv_valmtx(D)
v_pp <- t(Dinv) %*% v_bp
v_pp[c(149, 154, 157)]
v_bp[c(149, 154, 157)]
v_bp
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
IND_fd_exio
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
taxR
View(D)
view(D)
val_IN <- get_valuation_mtx('IN', 0)
debugSource('H:/MyDocuments/IO work/DLE_scripts/rIPFP - Valuation.R', echo=TRUE)
val_IN <- get_valuation_mtx('IN', 0)
debugSource('H:/MyDocuments/IO work/DLE_scripts/rIPFP - Valuation.R', echo=TRUE)
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
View(D)
debugSource('H:/MyDocuments/IO work/DLE_scripts/rIPFP - Valuation.R', echo=TRUE)
ybp[149]
debugSource('H:/MyDocuments/IO work/DLE_scripts/rIPFP - Valuation.R', echo=TRUE)
y_bp
y_bp[149]
cty_place
exio_ctys
length(exio_ctys)
matrix(final_demand[, cty_idx_fd[1]], nrow=200)
cty_idx_fd[1]
238/7
final_demand[, cty_idx_fd[1]]
y_bp <- matrix(final_demand[, cty_idx_fd[1]], nrow=200)  # The country's hh fd column to a matrix (200x49) in bp
y_bp <- rowSums(y_bp)
y_bp
sum(y_bp)
dim(final_demand)
y_bp[147]
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
taxR
taxR
''
Q
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
taxR[149]
formatC(taxR[149])
?formatC
formatC(taxR[149], format="f", digits=10)
valuation <- read.csv(paste0(EXIO3_path, paste0("V_", IO.year, ".csv")), header = FALSE)
IO.year
raw.S <- read.csv(paste0(EXIO3_path, "S", IO.year, ".csv"), header = FALSE)    # Stressor (Intensity)
raw.st <- read.csv(paste0(EXIO3_path, "st", IO.year, ".csv"), header = FALSE)  # Total stressor
raw.F <- read.csv(paste0(EXIO3_path, "F", IO.year, ".csv"), header = FALSE)
raw.S <- read.csv(paste0(EXIO3_path, "S_", IO.year, ".csv"), header = FALSE)    # Stressor (Intensity)
raw.st <- read.csv(paste0(EXIO3_path, "st_", IO.year, ".csv"), header = FALSE)  # Total stressor
raw.F <- read.csv(paste0(EXIO3_path, "F_", IO.year, ".csv"), header = FALSE)
raw.st <- read.csv(paste0(EXIO3_path, "st_", IO.year, ".csv"), header = FALSE)  # Total stressor
EXIO3_path_old = "C:/Users/min/IIASA/DLE - Documents/WS2 - Documents/Data/IO/EXIOBASE/EXIOBASE3/IOT_bug_w_India/"
EXIO3_path = "C:/Users/min/IIASA/DLE - Documents/WS2 - Documents/Data/IO/EXIOBASE/EXIOBASE3/IOT_bug_w_TROA/"
EXIO3_path_fix = "C:/Users/min/IIASA/DLE - Documents/WS2 - Documents/Data/IO/EXIOBASE/EXIOBASE3/EnvExt/EnvExt_NEU_1995-2015_14Nov/"
raw.st <- read.csv(paste0(EXIO3_path, "st_", IO.year, ".csv"), header = FALSE)  # Total stressor
raw.V <- read.csv(paste0(EXIO3_path, "V_", IO.year, ".csv"), header = FALSE)
source('H:/MyDocuments/IO work/DLE_scripts/Import_EXIO3.R', echo=TRUE)
?chop
debugSource('H:/MyDocuments/IO work/DLE_scripts/rIPFP - Valuation.R', echo=TRUE)
debugSource('H:/MyDocuments/IO work/DLE_scripts/rIPFP - Valuation.R', echo=TRUE)
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
taxR
max(taxR)
debugSource('H:/MyDocuments/IO work/DLE_scripts/rIPFP - Valuation.R', echo=TRUE)
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
max(taxR)
sum(IND_fd_exio_pp)
IND_fd_exio_pp
sum(IND_FD_ICP_io.yr[,1])
scaler_IND <- sum(IND_FD_ICP_io.yr[,1]) / sum(IND_fd_exio_pp)
init_FD_IND <- IND_FD_ICP_io.yr[,1] / scaler_IND
scaler_IND
# load(file="./Saved tables/IND2_AllHHConsump.Rda")
IND_fd_exio_pp <- get_purch_price(IND_fd_exio, "IN")
scaler_IND <- sum(IND_FD_ICP_io.yr[,1]) / sum(IND_fd_exio_pp)
init_FD_IND <- IND_FD_ICP_io.yr[,1] / scaler_IND
source('H:/MyDocuments/IO work/DLE_scripts/rIPFP - Valuation.R', echo=TRUE)
source('H:/MyDocuments/IO work/DLE_scripts/Load_init_data.R', echo=TRUE)
# Direct energy for the hh (not per cap)
IND_dir.FE_hh <- IND_MJ_ALL %>%
mutate(tot.GJ.dir = rowSums(select(.,-hhid, -weight), na.rm=TRUE)/1000) %>%
select(hhid, weight, tot.GJ.dir)
IND_dir.FE_hh.eq <- IND_MJ_ALL %>%
mutate(LPG.eq = Firewood.and.other.fuels/4) %>% # Approx 4 times.
select(-Firewood.and.other.fuels) %>% # To replace biomass with LPG equiv.
mutate(tot.GJ.dir = rowSums(select(.,-hhid, -weight), na.rm=TRUE)/1000) %>%
select(hhid, weight, tot.GJ.dir)
IND_dir.FE_hh.eq.noTRP <- IND_MJ_ALL %>%
mutate(LPG.eq = Firewood.and.other.fuels/4) %>% # Approx 4 times.
select(-Firewood.and.other.fuels, -Diesel, -Gasoline) %>% # To replace biomass with LPG equiv.
mutate(tot.GJ.dir = rowSums(select(.,-hhid, -weight), na.rm=TRUE)/1000) %>%
select(hhid, weight, tot.GJ.dir)
IND_emb.FE_hh <- eHH_IND %>% mutate(tot.GJ.emb.pcap = rowMeans(select(., starts_with("V")))) %>% select(-starts_with("V"))
IND_emb.FE_hh.noTRP <- eHH_IND.noTRP %>% mutate(tot.GJ.emb.pcap = rowMeans(select(., starts_with("V")))) %>% select(-starts_with("V"))
# Convert to per-cap
IND_tot.FE_hh.noTRP <- IND_emb.FE_hh.noTRP %>% left_join(data.table(IND_dir.FE_hh.eq.noTRP, key="hhid")) %>%
mutate(tot.GJ.dir.pcap = tot.GJ.dir / hh_size)
IND_tot.FE_hh.All <- IND_emb.FE_hh %>% left_join(data.table(IND_dir.FE_hh.eq, key="hhid")) %>%
mutate(tot.GJ.dir.pcap = tot.GJ.dir / hh_size)
IND_tot.FE_hh.Biom <- IND_emb.FE_hh %>% left_join(data.table(IND_dir.FE_hh, key="hhid")) %>%
mutate(tot.GJ.dir.pcap = tot.GJ.dir / hh_size)
# IND_tot.FE_hh <- IND_emb.FE_hh %>% left_join(data.table(IND_dir.FE_hh, key="hhid")) %>%
#   mutate(tot.GJ.dir.pcap = tot.GJ.dir / hh_size)
# Scale to match the IEA stat
IND_tot.FE_hh.noTRP <- data.frame(IND_tot.FE_hh.noTRP) %>% mutate_at(vars(starts_with("tot.GJ")), funs(./scaler_IND)) %>%
mutate(tot.GJ.pcap = tot.GJ.dir.pcap + tot.GJ.emb.pcap, income.pcap=income/hh_size)
IND_tot.FE_hh.All <- data.frame(IND_tot.FE_hh.All) %>% mutate_at(vars(starts_with("tot.GJ")), funs(./scaler_IND)) %>%
mutate(tot.GJ.pcap = tot.GJ.dir.pcap + tot.GJ.emb.pcap, income.pcap=income/hh_size)
IND_tot.FE_hh.Biom <- data.frame(IND_tot.FE_hh.Biom) %>% mutate_at(vars(starts_with("tot.GJ")), funs(./scaler_IND)) %>%
mutate(tot.GJ.pcap = tot.GJ.dir.pcap + tot.GJ.emb.pcap, income.pcap=income/hh_size)
avg.FE.hh <- IND_tot.FE_hh.All %>% summarise_at(vars(starts_with("tot.GJ")), funs(weighted.mean(., w=weight)))
avg.FE.hh.noTRP <- IND_tot.FE_hh.noTRP %>% summarise_at(vars(starts_with("tot.GJ")), funs(weighted.mean(., w=weight)))
decile_h.noTRP <- IND_tot.FE_hh.noTRP %>% filter(decile=="decile10")
decile_l.noTRP <- IND_tot.FE_hh.noTRP %>% filter(decile=="decile1")
avg.FE.hh
avg.FE.hh.noTRP
IND_pop_io.yr
gini(IND_tot.FE_hh.All$tot.GJ.pcap, weights=IND_tot.FE_hh.All$weight)
gini(IND_tot.FE_hh.noTRP$tot.GJ.pcap, weights=IND_tot.FE_hh.noTRP$weight)
gini(IND_tot.FE_hh.All$tot.GJ.emb.pcap, weights=IND_tot.FE_hh.All$weight)
gini(IND_tot.FE_hh.noTRP$tot.GJ.emb.pcap, weights=IND_tot.FE_hh.noTRP$weight)
gini(IND_tot.FE_hh.All$tot.GJ.dir.pcap, weights=IND_tot.FE_hh.All$weight)
gini(IND_tot.FE_hh.noTRP$tot.GJ.dir.pcap, weights=IND_tot.FE_hh.noTRP$weight)
n_draw <- 100
list[BRA.tnei.icp, BRA.alloc.tnei, NC_BRA_val_BRA.tnei, BRA_FD_adj_val_BRA.tnei] <-
DeriveIntensities('BRA', 'primary', pri.intensity.mat=tnei.exio)
sum(BRA_fd_exio_pp_EX)
sum(IND_fd_exio_pp)
sum(ZAF_fd_exio_pp)
list[BRA.tnei.icp, BRA.alloc.tnei, NC_BRA_val_BRA.tnei, BRA_FD_adj_val_BRA.tnei] <-
DeriveIntensities('BRA', 'primary', pri.intensity.mat=tnei.exio)
list[IND.tnei.icp, IND_alloc.tnei, NC_IND.tnei, IND_FD_adj.tnei] <-
DeriveIntensities('IND', 'primary', pri.intensity.mat=tnei.exio)
list[ZAF.tnei.icp, ZAF_alloc.tnei, NC_ZAF.tnei, ZAF_FD_adj.tnei] <-
DeriveIntensities('ZAF', 'primary', pri.intensity.mat=tnei.exio)
list[BRA.tfei.icp, BRA.alloc, NC_BRA_val_BRA, BRA_FD_adj_val_BRA] <- DeriveIntensities('BRA', 'final', final.intensity.mat=tfei.exio)
list[IND.tfei.icp, IND_alloc, NC_IND, IND_FD_adj] <- DeriveIntensities('IND', 'final', final.intensity.mat=tfei.exio)
list[ZAF.tfei.icp, ZAF_alloc, NC_ZAF, ZAF_FD_adj] <- DeriveIntensities('ZAF', 'final', final.intensity.mat=tfei.exio)
list[BRA.tfei.icp.elec, BRA.alloc, NC_BRA_val_BRA, BRA_FD_adj_val_BRA] <- DeriveIntensities('BRA', 'final', final.intensity.mat=tfei.elec)
list[IND.tfei.icp.elec, IND_alloc, NC_IND, IND_FD_adj] <- DeriveIntensities('IND', 'final', final.intensity.mat=tfei.elec)
list[ZAF.tfei.icp.elec, ZAF_alloc, NC_ZAF, ZAF_FD_adj] <- DeriveIntensities('ZAF', 'final', final.intensity.mat=tfei.elec)
list[BRA.tfei.icp.non.elec, BRA.alloc, NC_BRA_val_BRA, BRA_FD_adj_val_BRA] <- DeriveIntensities('BRA', 'final', final.intensity.mat=tfei.non.elec)
list[IND.tfei.icp.non.elec, IND_alloc, NC_IND, IND_FD_adj] <- DeriveIntensities('IND', 'final', final.intensity.mat=tfei.non.elec)
list[ZAF.tfei.icp.non.elec, ZAF_alloc, NC_ZAF, ZAF_FD_adj] <- DeriveIntensities('ZAF', 'final', final.intensity.mat=tfei.non.elec)
save(BRA.tfei.icp, file="./Saved tables/BRA.tfei.icp.Rda")
save(IND.tfei.icp, file="./Saved tables/IND.tfei.icp.Rda")
save(ZAF.tfei.icp, file="./Saved tables/ZAF.tfei.icp.Rda")
save(BRA.tnei.icp, file="./Saved tables/BRA.tnei.icp.Rda")
save(IND.tnei.icp, file="./Saved tables/IND.tnei.icp.Rda")
save(ZAF.tnei.icp, file="./Saved tables/ZAF.tnei.icp.Rda")
save(BRA.tfei.icp.elec, file="./Saved tables/BRA.tfei.icp.elec.Rda")
save(IND.tfei.icp.elec, file="./Saved tables/IND.tfei.icp.elec.Rda")
save(ZAF.tfei.icp.elec, file="./Saved tables/ZAF.tfei.icp.elec.Rda")
save(BRA.tfei.icp.non.elec, file="./Saved tables/BRA.tfei.icp.non.elec.Rda")
save(IND.tfei.icp.non.elec, file="./Saved tables/IND.tfei.icp.non.elec.Rda")
save(ZAF.tfei.icp.non.elec, file="./Saved tables/ZAF.tfei.icp.non.elec.Rda")
colMeans(IND.tfei.icp)
chng_pct_IND <- (IND_FD_adj - init_FD_IND) / init_FD_IND
chng_pct_IND[is.nan(chng_pct_IND)] <- 0
IND_FD_ICP_HH_adj <- IND_FD_ICP_AllHH * (chng_pct_IND + 1)
idx_inf <- which(is.infinite(chng_pct_IND))  # Identify rows with Inf adjustments
r_HH <- colSums(IND_FD_ICP_AllHH)/sum(IND_FD_ICP_AllHH)  # ratio of hh total to (unweighted) total
IND_FD_ICP_HH_adj[idx_inf,] <- t(sapply(IND_FD_adj[idx_inf] * 1e6, # M.USD to USD
function(x) x * r_HH / sum(r_HH * IND_HH$weight))) * scaler_IND
rm(r_HH)
gc()
save(IND_alloc, file="./Saved tables/IND_alloc.Rda")
save(IND_FD_adj, file="./Saved tables/IND_FD_adj.Rda")
save(IND_FD_ICP_HH_adj, file="./Saved tables/IND_FD_ICP_HH_adj.Rda")
list[eHH_IND, eHH_sd] <-  GetHHSectoralEnergyPerCap(ICP_all_idx, 'IND', IND_FD_ICP_HH_adj, IND.tfei.icp)
b <- SummarizeGJPerCapByDecile(eHH_IND)
# Without transportation (based on NTRA extension)
# list[IND.tfei.icp.NTRA, IND_alloc, NC_IND, IND_FD_adj] <- DeriveIntensities('IND', 'final', final.intensity.mat=as.matrix(tfei.sub$NTRA))
# list[eHH_IND.NTRA, eHH_sd.NTRA] <-  GetHHSectoralEnergyPerCap(ICP_all_idx, 'IND', IND_FD_ICP_HH_adj, IND.tfei.icp.NTRA)
# a1 <- SummarizeGJPerCapByDecile(eHH_IND.NTRA)
# Without transportation (based on NTRA extension)
# list[IND.tfei.icp.NTRA, IND_alloc, NC_IND, IND_FD_adj] <- DeriveIntensities('IND', 'final', final.intensity.mat=as.matrix(tfei.sub$NTRA))
ICP_transport_idx <- c(96:112, 154, 160) # Both Public transportation service & Private fuel
IND_FD_ICP_HH_adj.noTRP <- IND_FD_ICP_HH_adj
IND_FD_ICP_HH_adj.noTRP[ICP_transport_idx,] <- 0 # Zero out transportation expenditure.
list[eHH_IND.noTRP, eHH_sd.noTRP] <-  GetHHSectoralEnergyPerCap(ICP_all_idx, 'IND', IND_FD_ICP_HH_adj.noTRP, IND.tfei.icp)
a1 <- SummarizeGJPerCapByDecile(eHH_IND.noTRP)
IND_MJ_ALL <- readFinalEnergyfromDBAllHH() # in MJ / HH
# Direct energy for the hh (not per cap)
IND_dir.FE_hh <- IND_MJ_ALL %>%
mutate(tot.GJ.dir = rowSums(select(.,-hhid, -weight), na.rm=TRUE)/1000) %>%
select(hhid, weight, tot.GJ.dir)
IND_dir.FE_hh.eq <- IND_MJ_ALL %>%
mutate(LPG.eq = Firewood.and.other.fuels/4) %>% # Approx 4 times.
select(-Firewood.and.other.fuels) %>% # To replace biomass with LPG equiv.
mutate(tot.GJ.dir = rowSums(select(.,-hhid, -weight), na.rm=TRUE)/1000) %>%
select(hhid, weight, tot.GJ.dir)
IND_dir.FE_hh.eq.noTRP <- IND_MJ_ALL %>%
mutate(LPG.eq = Firewood.and.other.fuels/4) %>% # Approx 4 times.
select(-Firewood.and.other.fuels, -Diesel, -Gasoline) %>% # To replace biomass with LPG equiv.
mutate(tot.GJ.dir = rowSums(select(.,-hhid, -weight), na.rm=TRUE)/1000) %>%
select(hhid, weight, tot.GJ.dir)
IND_emb.FE_hh <- eHH_IND %>% mutate(tot.GJ.emb.pcap = rowMeans(select(., starts_with("V")))) %>% select(-starts_with("V"))
IND_emb.FE_hh.noTRP <- eHH_IND.noTRP %>% mutate(tot.GJ.emb.pcap = rowMeans(select(., starts_with("V")))) %>% select(-starts_with("V"))
# Convert to per-cap
IND_tot.FE_hh.noTRP <- IND_emb.FE_hh.noTRP %>% left_join(data.table(IND_dir.FE_hh.eq.noTRP, key="hhid")) %>%
mutate(tot.GJ.dir.pcap = tot.GJ.dir / hh_size)
IND_tot.FE_hh.All <- IND_emb.FE_hh %>% left_join(data.table(IND_dir.FE_hh.eq, key="hhid")) %>%
mutate(tot.GJ.dir.pcap = tot.GJ.dir / hh_size)
IND_tot.FE_hh.Biom <- IND_emb.FE_hh %>% left_join(data.table(IND_dir.FE_hh, key="hhid")) %>%
mutate(tot.GJ.dir.pcap = tot.GJ.dir / hh_size)
# IND_tot.FE_hh <- IND_emb.FE_hh %>% left_join(data.table(IND_dir.FE_hh, key="hhid")) %>%
#   mutate(tot.GJ.dir.pcap = tot.GJ.dir / hh_size)
# Scale to match the IEA stat
IND_tot.FE_hh.noTRP <- data.frame(IND_tot.FE_hh.noTRP) %>% mutate_at(vars(starts_with("tot.GJ")), funs(./scaler_IND)) %>%
mutate(tot.GJ.pcap = tot.GJ.dir.pcap + tot.GJ.emb.pcap, income.pcap=income/hh_size)
IND_tot.FE_hh.All <- data.frame(IND_tot.FE_hh.All) %>% mutate_at(vars(starts_with("tot.GJ")), funs(./scaler_IND)) %>%
mutate(tot.GJ.pcap = tot.GJ.dir.pcap + tot.GJ.emb.pcap, income.pcap=income/hh_size)
IND_tot.FE_hh.Biom <- data.frame(IND_tot.FE_hh.Biom) %>% mutate_at(vars(starts_with("tot.GJ")), funs(./scaler_IND)) %>%
mutate(tot.GJ.pcap = tot.GJ.dir.pcap + tot.GJ.emb.pcap, income.pcap=income/hh_size)
avg.FE.hh <- IND_tot.FE_hh.All %>% summarise_at(vars(starts_with("tot.GJ")), funs(weighted.mean(., w=weight)))
avg.FE.hh.noTRP <- IND_tot.FE_hh.noTRP %>% summarise_at(vars(starts_with("tot.GJ")), funs(weighted.mean(., w=weight)))
decile_h.noTRP <- IND_tot.FE_hh.noTRP %>% filter(decile=="decile10")
decile_l.noTRP <- IND_tot.FE_hh.noTRP %>% filter(decile=="decile1")
avg.FE.hh
avg.FE.hh.noTRP
source("P:/ene.general/DecentLivingEnergy/Surveys/Scripts/00 Load required packages.R")
source("P:/ene.general/DecentLivingEnergy/Surveys/Scripts/01 Load generic helper functions.R")
source("P:/ene.general/DecentLivingEnergy/Surveys/Generic function to access database.R")
source("P:/ene.general/DecentLivingEnergy/Surveys/Scripts/Functions for building Oracle DB tables.R")
types <- c('.tfei.icp', '.tnei.icp', '.tfei.icp.elec', '.tfei.icp.non.elec')
types.long <- c('Embodied final total', 'Embodied primary total', 'Embodied final electric', 'Embodied final non-electric')
ctys <- c('IND', 'BRA', 'ZAF')
int.db.mat <- list()
for (i in types) {
cty.int <- paste0(ctys, i)
# int.mat[[j]] <- eval(parse(text=cty.int))
# }
int.mat = list(eval(parse(text=cty.int[1])), eval(parse(text=cty.int[2])), eval(parse(text=cty.int[3])))
names(int.mat) <- ctys
int.sum <- list()
for (j in 1:length(ctys)) {
colnames(int.mat[[j]]) <- ICP_catnames
int_summary <- stat.desc(int.mat[[j]])
int_summary <- t(int_summary[c(9,13),]) %>% round(digits=2)  # Just mean and sd
int.sum[[j]] <- data.frame(COUNTRY=ctys[j], YR=IO.year, ICP_CODE=1:164, TYPE=types.long[which(types==i)], int_summary)
}
int.db.mat[[which(types==i)]] <- do.call("rbind", int.sum)
}
int.db <- do.call("rbind", int.db.mat)
writeDF2Oracle(int.db, "ENE_INT_EXIO3", primary.keys=c('COUNTRY', 'YR', 'ICP_CODE', 'TYPE'))
IND_fuel_hh <- IND_FUEL_Alldata %>% group_by(id, fuel) %>%
summarise(qty_tot=sum(qty_tot, na.rm=TRUE), val_tot=sum(val_tot, na.rm=TRUE)) %>% arrange(id)
# Dung price estimation - India
# USD 1=60 rupee (2015) https://tradingeconomics.com/india/currency
# 59(=60) rupee per 1.5 kg (2015) https://www.thequint.com/technology/2015/12/30/get-cow-dung-cakes-online-via-amazon-for-your-puja-at-rs-59
CPI_2015 <- as.numeric(CPI %>% filter(year==2015 & iso2c=='IN') %>% select(FP.CPI.TOTL) / CPI %>% filter(year==2007 & iso2c=='IN') %>% select(FP.CPI.TOTL))
prc_gobar <- 1/1.5/CPI_2015  # USD2007/kg
fuel_price <- fuel_price %>% mutate_cond(fuel=="Dung", price_avg = prc_gobar) %>%
mutate_cond(fuel=="Diesel, transport", price_avg = fuel_price$price_avg[fuel_price$fuel=="Diesel, non-transport"]) %>%
mutate_cond(fuel=="Gasoline, transport", price_avg = fuel_price$price_avg[fuel_price$fuel=="Gasoline, non-transport"])
IND_fuel_hh <- IND_fuel_hh %>% mutate(price_hh=val_tot/qty_tot) %>%
left_join(fuel_price) %>% mutate_cond(is.nan(price_hh), price_hh=price_avg) %>% arrange(id) %>% mutate(qty_impu = qty_tot) %>%
mutate_cond(qty_tot==0, qty_impu = val_tot/price_avg) %>% left_join(conv.ene) %>% mutate(MJ=MJ_per_unit*qty_impu)
IND_MJ_hh <- IND_fuel_hh %>% select(id, fuel, qty_impu, val_tot, MJ)
BuildMJperHH = function() {
IND_fuel_hh <- IND_FUEL_Alldata %>% group_by(id, fuel) %>%
summarise(qty_tot=sum(qty_tot, na.rm=TRUE), val_tot=sum(val_tot, na.rm=TRUE)) %>% arrange(id)
# Dung price estimation - India
# USD 1=60 rupee (2015) https://tradingeconomics.com/india/currency
# 59(=60) rupee per 1.5 kg (2015) https://www.thequint.com/technology/2015/12/30/get-cow-dung-cakes-online-via-amazon-for-your-puja-at-rs-59
CPI_2015 <- as.numeric(CPI %>% filter(year==2015 & iso2c=='IN') %>% select(FP.CPI.TOTL) / CPI %>% filter(year==2007 & iso2c=='IN') %>% select(FP.CPI.TOTL))
prc_gobar <- 1/1.5/CPI_2015  # USD2007/kg
fuel_price <- fuel_price %>% mutate_cond(fuel=="Dung", price_avg = prc_gobar) %>%
mutate_cond(fuel=="Diesel, transport", price_avg = fuel_price$price_avg[fuel_price$fuel=="Diesel, non-transport"]) %>%
mutate_cond(fuel=="Gasoline, transport", price_avg = fuel_price$price_avg[fuel_price$fuel=="Gasoline, non-transport"])
IND_fuel_hh <- IND_fuel_hh %>% mutate(price_hh=val_tot/qty_tot) %>%
left_join(fuel_price) %>% mutate_cond(is.nan(price_hh), price_hh=price_avg) %>% arrange(id) %>% mutate(qty_impu = qty_tot) %>%
mutate_cond(qty_tot==0, qty_impu = val_tot/price_avg) %>% left_join(conv.ene) %>% mutate(MJ=MJ_per_unit*qty_impu)
IND_MJ_hh <- IND_fuel_hh %>% select(id, fuel, qty_impu, val_tot, MJ)
return(IND_MJ_hh)
}
rm(IND_MJ_hh)
IND_fuel_hh <- IND_FUEL_Alldata %>% group_by(id, fuel) %>%
summarise(qty_tot=sum(qty_tot, na.rm=TRUE), val_tot=sum(val_tot, na.rm=TRUE)) %>% arrange(id)
# Dung price estimation - India
# USD 1=60 rupee (2015) https://tradingeconomics.com/india/currency
# 59(=60) rupee per 1.5 kg (2015) https://www.thequint.com/technology/2015/12/30/get-cow-dung-cakes-online-via-amazon-for-your-puja-at-rs-59
CPI_2015 <- as.numeric(CPI %>% filter(year==2015 & iso2c=='IN') %>% select(FP.CPI.TOTL) / CPI %>% filter(year==2007 & iso2c=='IN') %>% select(FP.CPI.TOTL))
prc_gobar <- 1/1.5/CPI_2015  # USD2007/kg
fuel_price <- fuel_price %>% mutate_cond(fuel=="Dung", price_avg = prc_gobar) %>%
mutate_cond(fuel=="Diesel, transport", price_avg = fuel_price$price_avg[fuel_price$fuel=="Diesel, non-transport"]) %>%
mutate_cond(fuel=="Gasoline, transport", price_avg = fuel_price$price_avg[fuel_price$fuel=="Gasoline, non-transport"])
IND_fuel_hh <- IND_fuel_hh %>% mutate(price_hh=val_tot/qty_tot) %>%
left_join(fuel_price) %>% mutate_cond(is.nan(price_hh), price_hh=price_avg) %>% arrange(id) %>% mutate(qty_impu = qty_tot) %>%
mutate_cond(qty_tot==0, qty_impu = val_tot/price_avg) %>% left_join(conv.ene) %>% mutate(MJ=MJ_per_unit*qty_impu)
IND_MJ_hh <- IND_fuel_hh %>% select(id, fuel, qty_impu, val_tot, MJ)
head(IND_MJ_hh)
head(IND_MJ_ALL)
IND_MJ_ALL <- readFinalEnergyfromDBAllHH() # in MJ per HH (wide format)
rename
