IND_tot.FE_hh.noTRP <- data.frame(IND_tot.FE_hh.noTRP) %>% mutate_at(vars(starts_with("tot.GJ")), funs(./scaler_IND)) %>%
mutate(tot.GJ.pcap = tot.GJ.dir.pcap + tot.GJ.emb.pcap, income.pcap=income/hh_size)
IND_tot.FE_hh.All <- data.frame(IND_tot.FE_hh.All) %>% mutate_at(vars(starts_with("tot.GJ")), funs(./scaler_IND)) %>%
mutate(tot.GJ.pcap = tot.GJ.dir.pcap + tot.GJ.emb.pcap, income.pcap=income/hh_size)
IND_tot.FE_hh.Biom <- data.frame(IND_tot.FE_hh.Biom) %>% mutate_at(vars(starts_with("tot.GJ")), funs(./scaler_IND)) %>%
mutate(tot.GJ.pcap = tot.GJ.dir.pcap + tot.GJ.emb.pcap, income.pcap=income/hh_size)
avg.FE.hh <- IND_tot.FE_hh.All %>% summarise_at(vars(starts_with("tot.GJ")), funs(weighted.mean(., w=weight)))
avg.FE.hh.noTRP <- IND_tot.FE_hh.noTRP %>% summarise_at(vars(starts_with("tot.GJ")), funs(weighted.mean(., w=weight)))
decile_h.noTRP <- IND_tot.FE_hh.noTRP %>% filter(decile=="decile10")
decile_l.noTRP <- IND_tot.FE_hh.noTRP %>% filter(decile=="decile1")
avg.FE.hh
avg.FE.hh.noTRP
DRI.kcal.IND
DRI.kcal.IND <- read.csv("C:/Users/min/IIASA/DLE - Documents/WS2 - Documents/Analysis/Food/DRI-india.csv") %>% filter(Nutrient=="calorie") %>%
spread(Group, DRI) %>% select(male_adult, male_minor, female_adult, female_minor)
DRI.kcal.IND
IND_HH_composition <-selectDBdata(tables='IND1_HH') %>% select(id, weight, hh_size, minor, male_adult, male_minor) %>%
mutate(female_adult = hh_size - minor - male_adult, female_minor = minor - male_minor) %>%
summarise_at(vars(male_adult:female_minor), funs(sum(.*weight, na.rm=TRUE)))
source("P:/ene.general/DecentLivingEnergy/Surveys/Generic function to access database.R")
IND_HH_composition <-selectDBdata(tables='IND1_HH') %>% select(id, weight, hh_size, minor, male_adult, male_minor) %>%
mutate(female_adult = hh_size - minor - male_adult, female_minor = minor - male_minor) %>%
summarise_at(vars(male_adult:female_minor), funs(sum(.*weight, na.rm=TRUE)))
IND_HH_composition
unit.food.base <- list(BRA=weighted.mean(DRI.kcal.IND, w=BRA_HH_composition) * 365,
IND=weighted.mean(DRI.kcal.IND, w=IND_HH_composition) * 365,
ZAF=weighted.mean(DRI.kcal.IND, w=ZAF_HH_composition) * 365)
BRA_HH_composition <-selectDBdata(tables='BRA1_HH') %>% select(id, weight, hh_size, minor, male_adult, male_minor) %>%
mutate(female_adult = hh_size - minor - male_adult, female_minor = minor - male_minor) %>%
summarise_at(vars(male_adult:female_minor), funs(sum(.*weight, na.rm=TRUE)))
ZAF_HH_composition <-selectDBdata(tables='ZAF1_HH') %>% select(id, weight, hh_size, minor, male_adult, male_minor) %>%
mutate(female_adult = hh_size - minor - male_adult, female_minor = minor - male_minor) %>%
summarise_at(vars(male_adult:female_minor), funs(sum(.*weight, na.rm=TRUE)))
unit.food.base <- list(BRA=weighted.mean(DRI.kcal.IND, w=BRA_HH_composition) * 365,
IND=weighted.mean(DRI.kcal.IND, w=IND_HH_composition) * 365,
ZAF=weighted.mean(DRI.kcal.IND, w=ZAF_HH_composition) * 365)
unit.food.base
load(file="./Saved tables/IND.tfei.icp.Rda")
kcal.proj = read_excel("../DLE trajectory/Data_FAO_2012_BICS_Narasimha.xlsx")
kcal.proj = kcal.proj %>% filter(Var %in% c("calTot", "pop")) %>% filter(Region!="CHN") %>%
spread(Var, Val) %>% mutate(AnnTotCal=pop*calTot*365) %>% select(-Sector) # TotCal in 1e6 kcal
kcal.ssp2 = read_excel("../DLE trajectory/SSP_projection_Valin_BICS_2015.xlsx",
sheet="Data") %>%
filter(SSP=="SSP2" & Reg!="ChinaReg" & Foodtype=="TOTAL - unscaled") %>%
select(-Diet_type, -Foodtype) %>% filter(Year >=2010 & Year <=2050) %>%
mutate(Reg=gsub("Reg", "", Reg)) %>% rename(Region=Reg) %>%
mutate(Region=gsub("SouthAfr", "ZAF", Region)) %>%
mutate(Region=gsub("India", "IND", Region)) %>%
mutate(Region=gsub("Brazil", "BRA", Region))
getwd()
load(file=paste0(getwd(), "/Saved tables/IND.food.tfei.Rda"))
load(file="./Saved tables/BRA.tfei.icp.Rda")
load(file="./Saved tables/IND.tfei.icp.Rda")
load(file="./Saved tables/ZAF.tfei.icp.Rda")
load(file="./Saved tables/BRA.tfei.icp.Rda")
load(file="./Saved tables/IND.tfei.icp.Rda")
load(file="./Saved tables/ZAF.tfei.icp.Rda")
getwd()
kcal.proj = read_excel("./DLE trajectory/Data_FAO_2012_BICS_Narasimha.xlsx")
kcal.proj = kcal.proj %>% filter(Var %in% c("calTot", "pop")) %>% filter(Region!="CHN") %>%
spread(Var, Val) %>% mutate(AnnTotCal=pop*calTot*365) %>% select(-Sector) # TotCal in 1e6 kcal
kcal.ssp2 = read_excel("./DLE trajectory/SSP_projection_Valin_BICS_2015.xlsx",
sheet="Data") %>%
filter(SSP=="SSP2" & Reg!="ChinaReg" & Foodtype=="TOTAL - unscaled") %>%
select(-Diet_type, -Foodtype) %>% filter(Year >=2010 & Year <=2050) %>%
mutate(Reg=gsub("Reg", "", Reg)) %>% rename(Region=Reg) %>%
mutate(Region=gsub("SouthAfr", "ZAF", Region)) %>%
mutate(Region=gsub("India", "IND", Region)) %>%
mutate(Region=gsub("Brazil", "BRA", Region))
kcal.ssp2
idx.food.icp <- 1:45
tot.food.BRA <- mean(rowSums(BRA.tfei.icp[, idx.food.icp] %*% diag(BRA_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_BRA
tot.food.IND <- mean(rowSums(IND.tfei.icp[, idx.food.icp] %*% diag(IND_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_IND
tot.food.ZAF <- mean(rowSums(ZAF.tfei.icp[, idx.food.icp] %*% diag(ZAF_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_ZAF
load(file="./Saved tables/IND_FD_ICP_io.yr.Rda")
load(file="./Saved tables/BRA_FD_ICP_io.yr.Rda")
load(file="./Saved tables/ZAF_FD_ICP_io.yr.Rda")
tot.food.BRA <- mean(rowSums(BRA.tfei.icp[, idx.food.icp] %*% diag(BRA_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_BRA
tot.food.IND <- mean(rowSums(IND.tfei.icp[, idx.food.icp] %*% diag(IND_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_IND
tot.food.ZAF <- mean(rowSums(ZAF.tfei.icp[, idx.food.icp] %*% diag(ZAF_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_ZAF
scaler_BRA <- sum(BRA_FD_ICP_io.yr[,1]) / sum(get_purch_price(BRA_fd_exio, "BR"))
exio_ctys <- c("AT", "BE", "BG", "CY", "CZ", "DE", "DK", "EE", "ES", "FI",
"FR", "GR",
"HR", # Added new at EXIO3
"HU", "IE", "IT", "LT", "LU", "LV", "MT", "NL",
"PL", "PT", "RO", "SE", "SI", "SK", "GB", "US", "JP", "CN",
"CA", "KR", "BR", "IN", "MX", "RU", "AU", "CH", "TR", "TW",
"NO", "ID", "ZA", "WA", "WL", "WE", "WF", "WM")
num.cty <- length(exio_ctys)
exio.len <- length(exio_ctys)*200
exio.fd.len <- length(exio_ctys)*7
n_draw <- 100
D_val_uncertainty <- 0  # or 1 : Whether to include uncertainty analysis for valuation mtx - margins and tax rates
draw_count <- 1
options(digits=3)
# DLE DB: 2010 $ PPP
# EXIO: XXXX EUR MER
CES.year <- 2010 # DLE DB
IO.year <- 2010 # Pick one closest to the survey year.  2007 for EXIO2
# DLE DB in PPP 2010$ (PPP in terms of private consumption)
# EXIO in MER 2007
# Need this PPP rate to go back to local currency in 2010
# [LCU/$]
PPP_cty = WDI(country = c("IN", "BR", "ZA"), indicator = c("PA.NUS.PPP", "PA.NUS.PRVT.PP"), start = CES.year, end = CES.year, extra = FALSE, cache = NULL)
PPP_IND <- as.numeric(PPP_cty %>% filter(country=="India") %>% select(PA.NUS.PRVT.PP))
PPP_BRA <- as.numeric(PPP_cty %>% filter(country=="Brazil") %>% select(PA.NUS.PRVT.PP))
PPP_ZAF <- as.numeric(PPP_cty %>% filter(country=="South Africa") %>% select(PA.NUS.PRVT.PP))
# Inflation
# Deflate currency in 2010 to 2007 (EXIO)
CPI <- WDI(country = c("IN", "BR", "FR", "ZA"), indicator = "FP.CPI.TOTL", start = 2007, end = 2015, extra = FALSE, cache = NULL)
CPI_ratio_IND <- as.numeric(CPI %>% filter(year==CES.year & iso2c=='IN') %>% select(FP.CPI.TOTL) / CPI %>% filter(year==IO.year & iso2c=='IN') %>% select(FP.CPI.TOTL))
CPI_ratio_BRA <- as.numeric(CPI %>% filter(year==CES.year & iso2c=='BR') %>% select(FP.CPI.TOTL) / CPI %>% filter(year==IO.year & iso2c=='BR') %>% select(FP.CPI.TOTL))
CPI_ratio_ZAF <- as.numeric(CPI %>% filter(year==CES.year & iso2c=='ZA') %>% select(FP.CPI.TOTL) / CPI %>% filter(year==IO.year & iso2c=='ZA') %>% select(FP.CPI.TOTL))
# Exchange rate (MER) [LCU/$]
EXR_EUR <- WDI(country = "XC", indicator = "PA.NUS.FCRF", start = IO.year, end = IO.year, extra = FALSE, cache = NULL)
EXR_EUR <- EXR_EUR %>% rename(r=PA.NUS.FCRF)
EXR_cty <- WDI(country = c("IN", "BR", "ZA"), indicator = "PA.NUS.FCRF", start = IO.year, end = IO.year, extra = FALSE, cache = NULL)
EXR_IND <- as.numeric(EXR_cty %>% filter(country=="India") %>% select(PA.NUS.FCRF))
EXR_BRA <- as.numeric(EXR_cty %>% filter(country=="Brazil") %>% select(PA.NUS.FCRF))
EXR_ZAF <- as.numeric(EXR_cty %>% filter(country=="South Africa") %>% select(PA.NUS.FCRF))
# HH Consumption in India 2007 [US$]
HH_CON <- WDI(country = c("IN", "BR", "ZA"),
indicator = c(#"NE.CON.PETC.CD",
"NE.CON.PRVT.CD",
# "NE.CON.PETC.CN",
"NE.CON.PRVT.KD"),
start = 2004, end = 2011, extra = FALSE, cache = NULL)
BRA_con_grwth <- as.numeric(HH_CON %>% filter(year==2008 & iso2c=='BR') %>% select(NE.CON.PRVT.KD) /
HH_CON %>% filter(year==IO.year & iso2c=='BR') %>% select(NE.CON.PRVT.KD))
IND_con_grwth <- as.numeric(HH_CON %>% filter(year==2011 & iso2c=='IN') %>% select(NE.CON.PRVT.KD) /
HH_CON %>% filter(year==IO.year & iso2c=='IN') %>% select(NE.CON.PRVT.KD))
ZAF_con_grwth <- as.numeric(HH_CON %>% filter(year==2010 & iso2c=='ZA') %>% select(NE.CON.PRVT.KD) /
HH_CON %>% filter(year==IO.year & iso2c=='ZA') %>% select(NE.CON.PRVT.KD))
# Imports/Exports of goods and services (% of GDP)
WDI(country = c("IN", "BR"), indicator = c("NE.IMP.GNFS.ZS", "NE.EXP.GNFS.ZS"), start = 2007, end = 2007, extra = FALSE, cache = NULL)
Popul <- WDI(country = c("IN", "BR", "FR", "ZA"), indicator = "SP.POP.TOTL", start = 2007, end = 2015, extra = FALSE, cache = NULL)
BRA_pop_io.yr <- Popul %>% rename(pop=SP.POP.TOTL) %>% filter(iso2c=="BR" & year==IO.year) %>% select(pop) %>% as.numeric()#1.9e8
IND_pop_io.yr <- Popul %>% rename(pop=SP.POP.TOTL) %>% filter(iso2c=="IN" & year==IO.year) %>% select(pop) %>% as.numeric()#1.159e9
ZAF_pop_io.yr <- Popul %>% rename(pop=SP.POP.TOTL) %>% filter(iso2c=="ZA" & year==IO.year) %>% select(pop) %>% as.numeric()#1.159e9
source("DLE_integration_functions.R")
source("EXIO_init_load.R") # EXIO2 read - Still necessary with EXIO3 for setting indexes, carrier names, etc.
# Get IND final demand from EXIO [M.EUR to M.USD]
IND_place <- which(exio_ctys=="IN")
IND_idx_fd <- seq(7*(IND_place-1)+1, 7*IND_place)   # 7 final demand columns per country
IND_idx_ex <- seq(200*(IND_place-1)+1, 200*IND_place)   # 200 EXIO comodities
IND_idx_ex.i <- seq(163*(IND_place-1)+1, 163*IND_place)   # 163 EXIO industries
IND_fd_ex <- matrix(final_demand[,IND_idx_fd[1]], nrow=200) / EXR_EUR$r  # to M.USD (2007 MER)
IND_fd_exio <- rowSums(IND_fd_ex) # Sum all HH FD across countries
IND_fd_exio_imp <- rowSums(IND_fd_ex[,-IND_place]) # Sum all HH FD across countries
# Get BRA final demand from EXIO [M.EUR to M.USD]
BRA_place <- which(exio_ctys=="BR")
BRA_idx_fd <- seq(7*(BRA_place-1)+1, 7*BRA_place)   # 7 final demand columns per country
BRA_idx_ex <- seq(200*(BRA_place-1)+1, 200*BRA_place)   # 7 final demand columns per country
# Issue: This 'final_demand' for BRA gives too small values for electricity expenditure.
# Instead I can use the column from 'BR_output.xls' file.
# BRA_fd_ex <- matrix(final_demand[,BRA_idx_fd[1]], nrow=200)
# BRA_fd_exio <- rowSums(BRA_fd_ex) # Sum all HH FD across countries
# BRA_fd_exio_imp <- rowSums(BRA_fd_ex[,-BRA_place]) # Sum all HH FD across countries
BRA_fd_ex <- read_excel("../Valuation/BR_output.xls", sheet="usebptot", skip=14, col_names=FALSE)
# Issue: Brazil FD has zero education expediture. (reasons unknown)
# Simply replace the zero with the values found on actual BRA IO
BRA_fd_exio <- as.matrix(BRA_fd_ex[1:200,169])
BRA_fd_exio[174] <- 15600  # M Euro
BRA_fd_exio <- BRA_fd_exio / EXR_EUR$r  # to M.USD 2007
# The value 15600 is from H:\MyDocuments\IO work\Bridging\CES-COICOP\BRA IO FD comparison.xlsx
# Get ZAF final demand from EXIO [M.EUR to M.USD]
ZAF_place <- which(exio_ctys=="ZA")
ZAF_idx_fd <- seq(7*(ZAF_place-1)+1, 7*ZAF_place)   # 7 final demand columns per country
ZAF_idx_ex <- seq(200*(ZAF_place-1)+1, 200*ZAF_place)   # 200 EXIO comodities
ZAF_idx_ex.i <- seq(163*(ZAF_place-1)+1, 163*ZAF_place)   # 163 EXIO industries
ZAF_fd_ex <- matrix(final_demand[,ZAF_idx_fd[1]], nrow=200) / EXR_EUR$r  # to M.USD (2007 MER)
ZAF_fd_exio <- rowSums(ZAF_fd_ex) # Sum all HH FD across countries
# source("Generate_base_ICP-EXIO_mapping.R")
n_sector_icp <- 151  # Num of ICP sectors
# This matrix is modified externally manually based on the resulting csv from running Generate_base_ICP-EXIO_mapping.R
# to fine-allocate mostly for food-subsectors.
# The result is in H:\MyDocuments\IO work\Bridging\CES-COICOP\ICP_EXIO_Qual_Edited.xlsx
# Manually changed cells are colored in green in the xlsx file.
# Two types of manual changes
#   1. ICP item disaggregation info further details (meat -> poultry)
#   2. Some positive EXIO FD values do not match to any ICP sectors. (e.g. stone from EXIO mapped to household maintenance in ICP)
#     => can be checked by cbind(names(qual_map)[colConst_init!=0 & colSums(qual_map_init)==0], colConst_init[colConst_init!=0 & colSums(qual_map_init)==0])
wb <- XLConnect::loadWorkbook("../Bridging/CES-COICOP/ICP_EXIO_Qual_UN_Edited.xlsx")
bridge_ICP_EXIO_q  <- XLConnect::readWorksheet(wb, "ICP_EXIO_Qual_UN2", header=TRUE,
forceConversion=T, endCol=201)
ICP_catnames <- bridge_ICP_EXIO_q[,1]
EX_catnames <- names(bridge_ICP_EXIO_q)[-1]
#####################################################
###     Treating CES fuel sectors differently     ###
#####################################################
wb <- XLConnect::loadWorkbook("../Bridging/CES-COICOP/CES_fuel_EXIO.xlsx")
bridge_fuel_EXIO_q  <- XLConnect::readWorksheet(wb, "Sheet1", header=TRUE, forceConversion=T,
startRow=2, startCol=3, endCol=202)
DLE_fuel_sector_Q  <- XLConnect::readWorksheet(wb, "Sheet2", header=TRUE, forceConversion=T,
startRow=2, startCol=3)
DLE_fuelnames_std  <- XLConnect::readWorksheet(wb, "Sheet1", header=TRUE, forceConversion=T,
startRow=2, startCol=2, endCol=2)
DLE_fuel_sector_Q[is.na(DLE_fuel_sector_Q)] <- 0
bridge_fuel_EXIO_q[is.na(bridge_fuel_EXIO_q)] <- 0
names(bridge_fuel_EXIO_q) <- EX_catnames
row.names(bridge_fuel_EXIO_q) <- DLE_fuelnames_std[,1]
names(DLE_fuelnames_std) <- "item"
n_sector_icp_fuel <- n_sector_icp + dim(DLE_fuelnames_std)[1]
############################################################
### Read final demand vector from each country's CES DB  ###
############################################################
source("P:/ene.general/DecentLivingEnergy/Surveys/Generic function to access database.R")
source("Read_final_demand_from_DB.R")
source("Read_direct_energy_from_DB.R")
# Read total FD for all population
# dim: n_CES_sector x 2 (or 11 for deciles)
# Comprehensive fuel sectors (union of all DBs)
DLE_fuel_types <- ConstructyFuelTypeSet() %>% arrange(fuel)
# Reading and constructing matrices
# source("Read_DLE_DB.R")
# Read pre-constructed raw DB data
# # IND
load(file=paste0(getwd(), "/Saved tables/IND_FD.Rda"))
load(file=paste0(getwd(), "/Saved tables/IND_HH.Rda"))
load(file=paste0(getwd(), "/Saved tables/IND_AllHHConsump.Rda"))
# load(file=paste0(getwd(), "/Saved tables/IND1_FUEL_Alldata.Rda")) # IND_FUEL_Alldata
# load(file=paste0(getwd(), "/Saved tables/IND_FD_harmonized.Rda")) # IND_FD_ICP_AllHH
#
# # ZAF
load(file=paste0(getwd(), "/Saved tables/ZAF_FD.Rda"))
load(file=paste0(getwd(), "/Saved tables/ZAF_HH.Rda"))
load(file=paste0(getwd(), "/Saved tables/ZAF_AllHHConsump.Rda"))
#
# # BRA
load(file=paste0(getwd(), "/Saved tables/BRA_FD.Rda"))
load(file=paste0(getwd(), "/Saved tables/BRA_HH.Rda"))
load(file=paste0(getwd(), "/Saved tables/BRA_AllHHConsump.Rda"))
#####################################################
### Read in (CES-Pseudo COICOP) mappings from WB  ###
#####################################################
### Read in ICP heading number following NTNU 109 mapping (not 100%, some ICP headings are aggregated) ###
Mapping <- system.file("ICP_SEQ.xlsx", package = "XLConnect")
wb <- XLConnect::loadWorkbook("../Bridging/CES-COICOP/Worldbank/ICP_SEQ.xls")
# I added 'Sheet2' and fixed some mis-categorizations for my needs.
icp_seq <- XLConnect::readWorksheet(wb, sheet="Sheet2", header=TRUE, startRow=2, startCol=1, endCol=1, forceConversion=T)
icp_cat <- XLConnect::readWorksheet(wb, sheet="Sheet2", header=FALSE, startRow=3, startCol=3, endCol=4, forceConversion=T)
NTNU <- XLConnect::readWorksheet(wb, sheet="Sheet2", header=TRUE, startRow=2, startCol=7, endCol=8, forceConversion=T)
icp_ntnu <-cbind(icp_seq, icp_cat, NTNU)
names(icp_ntnu)[2:3] <- c("COICOP1","COICOP2")
names(icp_ntnu)[5] <- "ICP_Heading"
source("rIPFP - Process_WB.R")  # Read in the function 'processWBscript' and resulting mtxs for 4 countries
# Issue: I still need to match with our CES DB and final NTNU 109 classification
#        How to combine fuel consumption and other (food etc)
#       -> We decided to follow ICP headings from the WB and bridge this ICP classification to EXIO.
##############################################
###       Generate CES-ICP mapping         ###
##############################################
# Read in CES code tables, fix some mis-mappings from WB, and create CES_ICP_IDN, CES_ICP_IND, etc.
# Then I can do
# IND_FD_ICP <- t(CES_ICP_IND) %*% as.matrix(IND_FD_code[,2])
# to get FD in ICP classification.
source("rIPFP - Map_CES_COICOP.R")
##############################################
###    Load EXIOBASE3      ###
##############################################
# For EXIO3, L_inverse/final_demand/tot_demand should be updated.
# For now I only use 2007 and 2008
# This also overwrites EXIO FD vectors.
source("Import_EXIO3.R")  # Incorporate EXIO3
# Need to come before "rIPFP - Valuation.R" because valuation data also changes
##########################################
### Read in function 'get_basic_price' ###
##########################################
source("rIPFP - Valuation.R")
# source("Init_consumption_vectors.R")  # Run once to generate and save those vectors
source("Load_init_data.R") # Need 'get_purch_price'
tot.food.BRA <- mean(rowSums(BRA.tfei.icp[, idx.food.icp] %*% diag(BRA_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_BRA
tot.food.IND <- mean(rowSums(IND.tfei.icp[, idx.food.icp] %*% diag(IND_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_IND
tot.food.ZAF <- mean(rowSums(ZAF.tfei.icp[, idx.food.icp] %*% diag(ZAF_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_ZAF
tot.food.elec.BRA <- mean(rowSums(BRA.tfei.icp.elec[, idx.food.icp] %*% diag(BRA_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_BRA
tot.food.elec.IND <- mean(rowSums(IND.tfei.icp.elec[, idx.food.icp] %*% diag(IND_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_IND
tot.food.elec.ZAF <- mean(rowSums(ZAF.tfei.icp.elec[, idx.food.icp] %*% diag(ZAF_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_ZAF
IND.food.tfei$EJ <- IND.food.tfei$EJ * mean(tot.food.IND)/IND.food.tfei$EJ[1]
DLE.base.kcal.pcap <- IND.food.tfei$kcal[1]/365/IND_pop_io.yr
SSP2.base.kcal.pcap <- kcal.ssp2 %>% filter(Region=="IND" & Year==2010) %>% select(Val) %>% as.numeric()
IND.food.tfei$kcal <- IND.food.tfei$kcal * SSP2.base.kcal.pcap/DLE.base.kcal.pcap
IND.food.tfei <- IND.food.tfei %>% mutate(ene.int=EJ/kcal*1e12, emi.int=gCO2e/kcal)  # MJ/kcal & g/kcal
IND.base <- IND.food.tfei %>% filter(name=="base") %>% select(ene.int) %>% as.numeric()
IND.devmin <- IND.food.tfei %>% filter(name=="dev_min") %>% select(ene.int) %>% as.numeric()    # will be achieved by 2030
IND.lctbhv <- IND.food.tfei %>% filter(name=="te_min_cap") %>% select(ene.int) %>% as.numeric() # will be achieved by 2050
tot.food.IND
IND.food.tfei
load(file=paste0(getwd(), "/Saved tables/IND.food.tfei.Rda"))
IND.food.tfei
kcal.proj
kcal.ssp2
kcal.ssp2
mean(tot.food.IND)
IND.food.tfei
tot.food.IND
unit.food.base
# Approach #1
# in [EJ] = 1e12 MJ
tot.food.BRA <- mean(rowSums(BRA.tfei.icp[, idx.food.icp] %*% diag(BRA_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_BRA
tot.food.IND <- mean(rowSums(IND.tfei.icp[, idx.food.icp] %*% diag(IND_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_IND
tot.food.ZAF <- mean(rowSums(ZAF.tfei.icp[, idx.food.icp] %*% diag(ZAF_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_ZAF
tot.food.elec.BRA <- mean(rowSums(BRA.tfei.icp.elec[, idx.food.icp] %*% diag(BRA_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_BRA
tot.food.elec.IND <- mean(rowSums(IND.tfei.icp.elec[, idx.food.icp] %*% diag(IND_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_IND
tot.food.elec.ZAF <- mean(rowSums(ZAF.tfei.icp.elec[, idx.food.icp] %*% diag(ZAF_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_ZAF
# Test Approach #2
# list[all_HH_f_IN, sd_hs] <- GetHHSectoralEnergyPerCap(ICP_food_idx,'IND', IND_FD_ICP_AllHH, IND.tfei.icp) # more reliable than IND_intensity
# (SummarizeGJPerCap(all_HH_f_IN) * (IND_pop_io.yr)) %>% mutate(min=u-2*sd, max=u+2*sd) / 1e9 # [EJ]
# list[all_HH_f_ZA, sd_hs] <- GetHHSectoralEnergyPerCap(ICP_food_idx,'ZAF', ZAF_FD_ICP_AllHH, ZAF.tfei.icp) # more reliable than IND_intensity
# (SummarizeGJPerCap(all_HH_f_ZA) * (ZAF_pop_io.yr)) %>% mutate(min=u-2*sd, max=u+2*sd) / 1e9 # [EJ]
# list[all_HH_f_BR, sd_hs] <- GetHHSectoralEnergyPerCap(ICP_food_idx,'BRA', BRA_FD_ICP_AllHH, BRA.tfei.icp) # more reliable than IND_intensity
# (SummarizeGJPerCap(all_HH_f_BR) * (BRA_pop_io.yr)) %>% mutate(min=u-2*sd, max=u+2*sd) / 1e9 # [EJ]
# Scale the optm output with the aggregate value (tot.food.IND) because optm output seems too high because of mean of avg vs. avg of mean
# For the food base case, Total FE are scaled to match the value from EXIO.
# Alternative scenarios are scaled by the same ratio.
IND.food.tfei$EJ <- IND.food.tfei$EJ * mean(tot.food.IND)/IND.food.tfei$EJ[1]
# Also scale kcal based on SSP2 assumption
# Base case divide by Hugo's SSP2 (2010) kcal (instead of our optimization outputs), which can be more reliable (w/o e.g. eat-out assumptions)
# Other opt scenarios are scaled at the same rate.
DLE.base.kcal.pcap <- IND.food.tfei$kcal[1]/365/IND_pop_io.yr
SSP2.base.kcal.pcap <- kcal.ssp2 %>% filter(Region=="IND" & Year==2010) %>% select(Val) %>% as.numeric()
IND.food.tfei$kcal <- IND.food.tfei$kcal * SSP2.base.kcal.pcap/DLE.base.kcal.pcap
# Update intensities
IND.food.tfei <- IND.food.tfei %>% mutate(ene.int=EJ/kcal*1e12, emi.int=gCO2e/kcal)  # MJ/kcal & g/kcal
# For BRA and ZAF, all scenarios are the same (no deficiency assumed)
BRA.base      <- tot.food.BRA      / (kcal.ssp2 %>% filter(Region=="BRA" & Year==2010)%>%select(Val) * BRA_pop_io.yr/1e12*365)
ZAF.base      <- tot.food.ZAF      / (kcal.ssp2 %>% filter(Region=="ZAF" & Year==2010)%>%select(Val) * ZAF_pop_io.yr/1e12*365)
BRA.base.elec <- tot.food.elec.BRA / (kcal.ssp2 %>% filter(Region=="BRA" & Year==2010)%>%select(Val) * BRA_pop_io.yr/1e12*365)
ZAF.base.elec <- tot.food.elec.ZAF / (kcal.ssp2 %>% filter(Region=="ZAF" & Year==2010)%>%select(Val) * ZAF_pop_io.yr/1e12*365)
# For IND, intensities depend on scenarios. (MJ/kcal)
IND.base <- IND.food.tfei %>% filter(name=="base") %>% select(ene.int) %>% as.numeric()
IND.devmin <- IND.food.tfei %>% filter(name=="dev_min") %>% select(ene.int) %>% as.numeric()    # will be achieved by 2030
IND.lctbhv <- IND.food.tfei %>% filter(name=="te_min_cap") %>% select(ene.int) %>% as.numeric() # will be achieved by 2050
IND.base.elec <- as.numeric(tot.food.elec.IND / IND.food.tfei$kcal[1]) * 1e12
IND.base.em <- IND.food.tfei %>% filter(name=="base") %>% select(emi.int) %>% as.numeric()
IND.devmin.em <- IND.food.tfei %>% filter(name=="dev_min") %>% select(emi.int) %>% as.numeric()    # will be achieved by 2030
IND.lctbhv.em <- IND.food.tfei %>% filter(name=="te_min_cap") %>% select(emi.int) %>% as.numeric() # will be achieved by 2050
# Set up adoption sequences for diff scenarios
# devmin is achieved by 2030 in ACCEL, te_min_cap is achieved by 2050 (in 40 years) in LCT.BHV
# FE intensity (MJ/kcal)
IND.seq.devmin <- c(seq(IND.base, IND.devmin, along.with=Year.base:Year.obs[3])[Year.obs[1:3]-Year.base+1], IND.devmin, IND.devmin)
IND.seq.lctbhv <- seq(IND.base, IND.lctbhv, along.with=Year.base:Year.end)[Year.obs-Year.base+1]
# Emissions intensity (g/kcal)
IND.seq.devmin.em <- c(seq(IND.base.em, IND.devmin.em, along.with=Year.base:Year.obs[3])[Year.obs[1:3]-Year.base+1], IND.devmin.em, IND.devmin.em)
IND.seq.lctbhv.em <- seq(IND.base.em, IND.lctbhv.em, along.with=Year.base:Year.end)[Year.obs-Year.base+1]
# Construct inputs for merge process (done in DLE_integration_Init.R)
tfei.food.base <- list(BRA= BRA.base, IND= IND.base, ZAF= ZAF.base)
tfei.food.accel <- list(BRA= BRA.base, IND= IND.seq.devmin, ZAF= ZAF.base)
tfei.food.lctbhv <- list(BRA= BRA.base, IND= IND.seq.lctbhv, ZAF= ZAF.base)
tfei.food.elec.base <- list(BRA= BRA.base.elec, IND= IND.base.elec, ZAF= ZAF.base.elec)
tfei.food.elec.accel <- list(BRA= BRA.base.elec,
IND= IND.seq.devmin * (tot.food.elec.IND/tot.food.IND),
ZAF= ZAF.base.elec)
tfei.food.elec.lctbhv <- list(BRA= BRA.base.elec,
IND= IND.seq.lctbhv * (tot.food.elec.IND/tot.food.IND),
ZAF= ZAF.base.elec)
tfei.food.non.elec.base <- mapply('-',  tfei.food.base, tfei.food.elec.base)
tfei.food.non.elec.accel <- mapply('-',  tfei.food.accel, tfei.food.elec.accel)
tfei.food.non.elec.lctbhv <- mapply('-',  tfei.food.lctbhv, tfei.food.elec.lctbhv)
names(tfei.food.non.elec.base) <- names(tfei.food.base)
names(tfei.food.non.elec.accel) <- names(tfei.food.accel)
names(tfei.food.non.elec.lctbhv) <- names(tfei.food.lctbhv)
# These units are kcal per capita per year
DLE.kcal.pcap <- 2162.835  # From our IND food analysis < DRI.pcap$cal.DRI_pcap
DRI.kcal.IND <- read.csv("C:/Users/min/IIASA/DLE - Documents/WS2 - Documents/Analysis/Food/DRI-india.csv") %>% filter(Nutrient=="calorie") %>%
spread(Group, DRI) %>% select(male_adult, male_minor, female_adult, female_minor)
IND_HH_composition <-selectDBdata(tables='IND1_HH') %>% select(id, weight, hh_size, minor, male_adult, male_minor) %>%
mutate(female_adult = hh_size - minor - male_adult, female_minor = minor - male_minor) %>%
summarise_at(vars(male_adult:female_minor), funs(sum(.*weight, na.rm=TRUE)))
BRA_HH_composition <-selectDBdata(tables='BRA1_HH') %>% select(id, weight, hh_size, minor, male_adult, male_minor) %>%
mutate(female_adult = hh_size - minor - male_adult, female_minor = minor - male_minor) %>%
summarise_at(vars(male_adult:female_minor), funs(sum(.*weight, na.rm=TRUE)))
ZAF_HH_composition <-selectDBdata(tables='ZAF1_HH') %>% select(id, weight, hh_size, minor, male_adult, male_minor) %>%
mutate(female_adult = hh_size - minor - male_adult, female_minor = minor - male_minor) %>%
summarise_at(vars(male_adult:female_minor), funs(sum(.*weight, na.rm=TRUE)))
unit.food.base <- list(BRA=weighted.mean(DRI.kcal.IND, w=BRA_HH_composition) * 365,
IND=weighted.mean(DRI.kcal.IND, w=IND_HH_composition) * 365,
ZAF=weighted.mean(DRI.kcal.IND, w=ZAF_HH_composition) * 365)
unit.food.base
DLE.base.kcal.pcap
SSP2.base.kcal.pcap
kcal.ssp2
IND.food.tfei
getwd()
source('H:/MyDocuments/IO work/DLE_scripts/Init.R', echo=TRUE)
source('H:/MyDocuments/IO work/DLE_scripts/.Rprofile', echo=TRUE)
##############################################
###       Generate CES-ICP mapping         ###
##############################################
# Read in CES code tables, fix some mis-mappings from WB, and create CES_ICP_IDN, CES_ICP_IND, etc.
# Then I can do
# IND_FD_ICP <- t(CES_ICP_IND) %*% as.matrix(IND_FD_code[,2])
# to get FD in ICP classification.
source("rIPFP - Map_CES_COICOP.R")
##############################################
###    Load EXIOBASE3      ###
##############################################
# For EXIO3, L_inverse/final_demand/tot_demand should be updated.
# For now I only use 2007 and 2008
# This also overwrites EXIO FD vectors.
source("Import_EXIO3.R")  # Incorporate EXIO3
# Need to come before "rIPFP - Valuation.R" because valuation data also changes
##########################################
### Read in function 'get_basic_price' ###
##########################################
source("rIPFP - Valuation.R")
# source("Init_consumption_vectors.R")  # Run once to generate and save those vectors
source("Load_init_data.R") # Need 'get_purch_price'
a<- XLConnect::loadWorkbook(paste0("../Valuation/Valuation_3_4/", country, "_", io.year, ".xls"))
a<- XLConnect::loadWorkbook(paste0("../Valuation/Valuation_3_4/", "IN", "_", IO.year, ".xls"))
IO.year
a
source('H:/MyDocuments/IO work/DLE_scripts/rIPFP - Valuation.R', echo=TRUE)
source("Load_init_data.R") # Need 'get_purch_price'
load(file=paste0(getwd(), "/Saved tables/IND.food.tfei.Rda"))
IND.food.tfei
load(file="./Saved tables/BRA.tfei.icp.Rda")
load(file="./Saved tables/IND.tfei.icp.Rda")
load(file="./Saved tables/ZAF.tfei.icp.Rda")
load(file="./Saved tables/IND_FD_ICP_io.yr.Rda")
load(file="./Saved tables/BRA_FD_ICP_io.yr.Rda")
load(file="./Saved tables/ZAF_FD_ICP_io.yr.Rda")
kcal.proj = read_excel("./DLE trajectory/Data_FAO_2012_BICS_Narasimha.xlsx")
kcal.proj = kcal.proj %>% filter(Var %in% c("calTot", "pop")) %>% filter(Region!="CHN") %>%
spread(Var, Val) %>% mutate(AnnTotCal=pop*calTot*365) %>% select(-Sector) # TotCal in 1e6 kcal
kcal.ssp2 = read_excel("./DLE trajectory/SSP_projection_Valin_BICS_2015.xlsx",
sheet="Data") %>%
filter(SSP=="SSP2" & Reg!="ChinaReg" & Foodtype=="TOTAL - unscaled") %>%
select(-Diet_type, -Foodtype) %>% filter(Year >=2010 & Year <=2050) %>%
mutate(Reg=gsub("Reg", "", Reg)) %>% rename(Region=Reg) %>%
mutate(Region=gsub("SouthAfr", "ZAF", Region)) %>%
mutate(Region=gsub("India", "IND", Region)) %>%
mutate(Region=gsub("Brazil", "BRA", Region))
# Total energy/year (EJ/year) - Good to be based on household consumption (ICP)
idx.food.icp <- 1:45
tot.food.BRA <- mean(rowSums(BRA.tfei.icp[, idx.food.icp] %*% diag(BRA_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_BRA
tot.food.IND <- mean(rowSums(IND.tfei.icp[, idx.food.icp] %*% diag(IND_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_IND
tot.food.ZAF <- mean(rowSums(ZAF.tfei.icp[, idx.food.icp] %*% diag(ZAF_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_ZAF
tot.food.elec.BRA <- mean(rowSums(BRA.tfei.icp.elec[, idx.food.icp] %*% diag(BRA_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_BRA
tot.food.elec.IND <- mean(rowSums(IND.tfei.icp.elec[, idx.food.icp] %*% diag(IND_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_IND
tot.food.elec.ZAF <- mean(rowSums(ZAF.tfei.icp.elec[, idx.food.icp] %*% diag(ZAF_FD_ICP_io.yr[idx.food.icp, 1]))) / 1e6 / scaler_ZAF
# Test Approach #2
IND.food.tfei$EJ <- IND.food.tfei$EJ * mean(tot.food.IND)/IND.food.tfei$EJ[1]
SSP2.base.kcal.pcap <- kcal.ssp2 %>% filter(Region=="IND" & Year==2010) %>% select(Val) %>% as.numeric()
DLE.base.kcal.pcap <- IND.food.tfei$kcal[1]/365/IND_pop_io.yr
IND.food.tfei$kcal <- IND.food.tfei$kcal * SSP2.base.kcal.pcap/DLE.base.kcal.pcap
IND.food.tfei <- IND.food.tfei %>% mutate(ene.int=EJ/kcal*1e12, emi.int=gCO2e/kcal)  # MJ/kcal & g/kcal
IND.food.tfei
# For BRA and ZAF, all scenarios are the same (no deficiency assumed)
BRA.base      <- tot.food.BRA      / (kcal.ssp2 %>% filter(Region=="BRA" & Year==2010)%>%select(Val) * BRA_pop_io.yr/1e12*365)
ZAF.base      <- tot.food.ZAF      / (kcal.ssp2 %>% filter(Region=="ZAF" & Year==2010)%>%select(Val) * ZAF_pop_io.yr/1e12*365)
BRA.base.elec <- tot.food.elec.BRA / (kcal.ssp2 %>% filter(Region=="BRA" & Year==2010)%>%select(Val) * BRA_pop_io.yr/1e12*365)
ZAF.base.elec <- tot.food.elec.ZAF / (kcal.ssp2 %>% filter(Region=="ZAF" & Year==2010)%>%select(
IND.base <- IND.food.tfei %>% filter(name=="base") %>% select(ene.int) %>% as.numeric()
IND.devmin <- IND.food.tfei %>% filter(name=="dev_min") %>% select(ene.int) %>% as.numeric()    # will be achieved by 2030
IND.lctbhv <- IND.food.tfei %>% filter(name=="te_min_cap") %>% select(ene.int) %>% as.numeric() # will be achieved by 2050
IND.base
IND.devmin
IND.lctbhv
IND.base.elec <- as.numeric(tot.food.elec.IND / IND.food.tfei$kcal[1]) * 1e12
IND.base.em <- IND.food.tfei %>% filter(name=="base") %>% select(emi.int) %>% as.numeric()
IND.devmin.em <- IND.food.tfei %>% filter(name=="dev_min") %>% select(emi.int) %>% as.numeric()    # will be achieved by 2030
IND.lctbhv.em <- IND.food.tfei %>% filter(name=="te_min_cap") %>% select(emi.int) %>% as.numeric() # will be achieved by 2050
# Set up adoption sequences for diff scenarios
# devmin is achieved by 2030 in ACCEL, te_min_cap is achieved by 2050 (in 40 years) in LCT.BHV
# FE intensity (MJ/kcal)
IND.seq.devmin <- c(seq(IND.base, IND.devmin, along.with=Year.base:Year.obs[3])[Year.obs[1:3]-Year.base+1], IND.devmin, IND.devmin)
IND.seq.lctbhv <- seq(IND.base, IND.lctbhv, along.with=Year.base:Year.end)[Year.obs-Year.base+1]
# Emissions intensity (g/kcal)
IND.seq.devmin.em <- c(seq(IND.base.em, IND.devmin.em, along.with=Year.base:Year.obs[3])[Year.obs[1:3]-Year.base+1], IND.devmin.em, IND.devmin.em)
IND.seq.lctbhv.em <- seq(IND.base.em, IND.lctbhv.em, along.with=Year.base:Year.end)[Year.obs-Year.base+1]
# Construct inputs for merge process (done in DLE_integration_Init.R)
tfei.food.base <- list(BRA= BRA.base, IND= IND.base, ZAF= ZAF.base)
tfei.food.accel <- list(BRA= BRA.base, IND= IND.seq.devmin, ZAF= ZAF.base)
tfei.food.lctbhv <- list(BRA= BRA.base, IND= IND.seq.lctbhv, ZAF= ZAF.base)
tfei.food.elec.base <- list(BRA= BRA.base.elec, IND= IND.base.elec, ZAF= ZAF.base.elec)
tfei.food.elec.accel <- list(BRA= BRA.base.elec,
IND= IND.seq.devmin * (tot.food.elec.IND/tot.food.IND),
ZAF= ZAF.base.elec)
tfei.food.elec.lctbhv <- list(BRA= BRA.base.elec,
IND= IND.seq.lctbhv * (tot.food.elec.IND/tot.food.IND),
ZAF= ZAF.base.elec)
tfei.food.non.elec.base <- mapply('-',  tfei.food.base, tfei.food.elec.base)
tfei.food.non.elec.accel <- mapply('-',  tfei.food.accel, tfei.food.elec.accel)
tfei.food.non.elec.lctbhv <- mapply('-',  tfei.food.lctbhv, tfei.food.elec.lctbhv)
names(tfei.food.non.elec.base) <- names(tfei.food.base)
names(tfei.food.non.elec.accel) <- names(tfei.food.accel)
names(tfei.food.non.elec.lctbhv) <- names(tfei.food.lctbhv)
#############################
### DLE Integration works ###
#############################
# Assume Init.R is already run.
### Define additinoal functions for this analysis
# source("DLE_integration_Functions.R")
# Returns time-series (now, 2030, 2050)
Year.end <- 2050
Year.base <- 2015
Year.obs <- c(Year.base, seq(2020, Year.end, 10))
#DLE.sectors <- c("Food", "Clothing", "Health.Edu", "Housing.BL", "Housing.OP", "Water.Sani", "Road", "Appliance", "Transport")
DLE.countries <- c('IND', 'BRA', 'ZAF')
# This is based on EXIO3 Final Energy extension.
n_draw <- 100
# list[BRA.tpei.use.icp, BRA.alloc.use, NC_BRA_val_BRA.use, BRA_FD_adj_va
tfei.food.base
tfei.food.accel
tfei.food.accel <- list(BRA= BRA.base, IND= IND.seq.devmin, ZAF= ZAF.base)
IND.seq.devmin <- c(seq(IND.base, IND.devmin, along.with=Year.base:Year.obs[3])[Year.obs[1:3]-Year.base+1], IND.devmin, IND.devmin)
IND.seq.lctbhv <- seq(IND.base, IND.lctbhv, along.with=Year.base:Year.end)[Year.obs-Year.base+1]
tfei.food.accel <- list(BRA= BRA.base, IND= IND.seq.devmin, ZAF= ZAF.base)
tfei.food.lctbhv <- list(BRA= BRA.base, IND= IND.seq.lctbhv, ZAF= ZAF.base)
tfei.food.accel
tfei.food.lctbhv
kcal.ssp2
